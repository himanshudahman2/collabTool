{"ast":null,"code":"var emitter = require('../../emitter');\n\nvar util = require('../../util');\n\nmodule.exports = LocalPresence;\n\nfunction LocalPresence(presence, presenceId) {\n  emitter.EventEmitter.call(this);\n\n  if (!presenceId || typeof presenceId !== 'string') {\n    throw new Error('LocalPresence presenceId must be a string');\n  }\n\n  this.presence = presence;\n  this.presenceId = presenceId;\n  this.connection = presence.connection;\n  this.presenceVersion = 0;\n  this.value = null;\n  this._pendingMessages = [];\n  this._callbacksByPresenceVersion = {};\n}\n\nemitter.mixin(LocalPresence);\n\nLocalPresence.prototype.submit = function (value, callback) {\n  this.value = value;\n  this.send(callback);\n};\n\nLocalPresence.prototype.send = function (callback) {\n  var message = this._message();\n\n  this._pendingMessages.push(message);\n\n  this._callbacksByPresenceVersion[message.pv] = callback;\n\n  this._sendPending();\n};\n\nLocalPresence.prototype.destroy = function (callback) {\n  var presence = this;\n  this.submit(null, function (error) {\n    if (error) return presence._callbackOrEmit(error, callback);\n    delete presence.presence.localPresences[presence.presenceId];\n    if (callback) callback();\n  });\n};\n\nLocalPresence.prototype._sendPending = function () {\n  if (!this.connection.canSend) return;\n  var presence = this;\n\n  this._pendingMessages.forEach(function (message) {\n    presence.connection.send(message);\n  });\n\n  this._pendingMessages = [];\n};\n\nLocalPresence.prototype._ack = function (error, presenceVersion) {\n  var callback = this._getCallback(presenceVersion);\n\n  this._callbackOrEmit(error, callback);\n};\n\nLocalPresence.prototype._message = function () {\n  return {\n    a: 'p',\n    ch: this.presence.channel,\n    id: this.presenceId,\n    p: this.value,\n    pv: this.presenceVersion++\n  };\n};\n\nLocalPresence.prototype._getCallback = function (presenceVersion) {\n  var callback = this._callbacksByPresenceVersion[presenceVersion];\n  delete this._callbacksByPresenceVersion[presenceVersion];\n  return callback;\n};\n\nLocalPresence.prototype._callbackOrEmit = function (error, callback) {\n  if (callback) return util.nextTick(callback, error);\n  if (error) this.emit('error', error);\n};","map":null,"metadata":{},"sourceType":"script"}