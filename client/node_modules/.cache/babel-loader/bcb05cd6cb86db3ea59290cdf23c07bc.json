{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Op_1 = __importDefault(require(\"./Op\"));\n\nvar Iterator =\n/** @class */\nfunction () {\n  function Iterator(ops) {\n    this.ops = ops;\n    this.index = 0;\n    this.offset = 0;\n  }\n\n  Iterator.prototype.hasNext = function () {\n    return this.peekLength() < Infinity;\n  };\n\n  Iterator.prototype.next = function (length) {\n    if (!length) {\n      length = Infinity;\n    }\n\n    var nextOp = this.ops[this.index];\n\n    if (nextOp) {\n      var offset = this.offset;\n      var opLength = Op_1.default.length(nextOp);\n\n      if (length >= opLength - offset) {\n        length = opLength - offset;\n        this.index += 1;\n        this.offset = 0;\n      } else {\n        this.offset += length;\n      }\n\n      if (typeof nextOp.delete === 'number') {\n        return {\n          delete: length\n        };\n      } else {\n        var retOp = {};\n\n        if (nextOp.attributes) {\n          retOp.attributes = nextOp.attributes;\n        }\n\n        if (typeof nextOp.retain === 'number') {\n          retOp.retain = length;\n        } else if (typeof nextOp.insert === 'string') {\n          retOp.insert = nextOp.insert.substr(offset, length);\n        } else {\n          // offset should === 0, length should === 1\n          retOp.insert = nextOp.insert;\n        }\n\n        return retOp;\n      }\n    } else {\n      return {\n        retain: Infinity\n      };\n    }\n  };\n\n  Iterator.prototype.peek = function () {\n    return this.ops[this.index];\n  };\n\n  Iterator.prototype.peekLength = function () {\n    if (this.ops[this.index]) {\n      // Should never return 0 if our index is being managed correctly\n      return Op_1.default.length(this.ops[this.index]) - this.offset;\n    } else {\n      return Infinity;\n    }\n  };\n\n  Iterator.prototype.peekType = function () {\n    if (this.ops[this.index]) {\n      if (typeof this.ops[this.index].delete === 'number') {\n        return 'delete';\n      } else if (typeof this.ops[this.index].retain === 'number') {\n        return 'retain';\n      } else {\n        return 'insert';\n      }\n    }\n\n    return 'retain';\n  };\n\n  Iterator.prototype.rest = function () {\n    if (!this.hasNext()) {\n      return [];\n    } else if (this.offset === 0) {\n      return this.ops.slice(this.index);\n    } else {\n      var offset = this.offset;\n      var index = this.index;\n      var next = this.next();\n      var rest = this.ops.slice(this.index);\n      this.offset = offset;\n      this.index = index;\n      return [next].concat(rest);\n    }\n  };\n\n  return Iterator;\n}();\n\nexports.default = Iterator;","map":null,"metadata":{},"sourceType":"script"}