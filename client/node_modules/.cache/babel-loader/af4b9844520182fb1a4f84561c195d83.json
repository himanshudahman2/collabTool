{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_clonedeep_1 = __importDefault(require(\"lodash.clonedeep\"));\n\nvar lodash_isequal_1 = __importDefault(require(\"lodash.isequal\"));\n\nvar AttributeMap;\n\n(function (AttributeMap) {\n  function compose(a, b, keepNull) {\n    if (a === void 0) {\n      a = {};\n    }\n\n    if (b === void 0) {\n      b = {};\n    }\n\n    if (typeof a !== 'object') {\n      a = {};\n    }\n\n    if (typeof b !== 'object') {\n      b = {};\n    }\n\n    var attributes = lodash_clonedeep_1.default(b);\n\n    if (!keepNull) {\n      attributes = Object.keys(attributes).reduce(function (copy, key) {\n        if (attributes[key] != null) {\n          copy[key] = attributes[key];\n        }\n\n        return copy;\n      }, {});\n    }\n\n    for (var key in a) {\n      if (a[key] !== undefined && b[key] === undefined) {\n        attributes[key] = a[key];\n      }\n    }\n\n    return Object.keys(attributes).length > 0 ? attributes : undefined;\n  }\n\n  AttributeMap.compose = compose;\n\n  function diff(a, b) {\n    if (a === void 0) {\n      a = {};\n    }\n\n    if (b === void 0) {\n      b = {};\n    }\n\n    if (typeof a !== 'object') {\n      a = {};\n    }\n\n    if (typeof b !== 'object') {\n      b = {};\n    }\n\n    var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attrs, key) {\n      if (!lodash_isequal_1.default(a[key], b[key])) {\n        attrs[key] = b[key] === undefined ? null : b[key];\n      }\n\n      return attrs;\n    }, {});\n    return Object.keys(attributes).length > 0 ? attributes : undefined;\n  }\n\n  AttributeMap.diff = diff;\n\n  function invert(attr, base) {\n    if (attr === void 0) {\n      attr = {};\n    }\n\n    if (base === void 0) {\n      base = {};\n    }\n\n    attr = attr || {};\n    var baseInverted = Object.keys(base).reduce(function (memo, key) {\n      if (base[key] !== attr[key] && attr[key] !== undefined) {\n        memo[key] = base[key];\n      }\n\n      return memo;\n    }, {});\n    return Object.keys(attr).reduce(function (memo, key) {\n      if (attr[key] !== base[key] && base[key] === undefined) {\n        memo[key] = null;\n      }\n\n      return memo;\n    }, baseInverted);\n  }\n\n  AttributeMap.invert = invert;\n\n  function transform(a, b, priority) {\n    if (priority === void 0) {\n      priority = false;\n    }\n\n    if (typeof a !== 'object') {\n      return b;\n    }\n\n    if (typeof b !== 'object') {\n      return undefined;\n    }\n\n    if (!priority) {\n      return b; // b simply overwrites us without priority\n    }\n\n    var attributes = Object.keys(b).reduce(function (attrs, key) {\n      if (a[key] === undefined) {\n        attrs[key] = b[key]; // null is a valid value\n      }\n\n      return attrs;\n    }, {});\n    return Object.keys(attributes).length > 0 ? attributes : undefined;\n  }\n\n  AttributeMap.transform = transform;\n})(AttributeMap || (AttributeMap = {}));\n\nexports.default = AttributeMap;","map":null,"metadata":{},"sourceType":"script"}