{"ast":null,"code":"var emitter = require('../../emitter');\n\nvar LocalPresence = require('./local-presence');\n\nvar RemotePresence = require('./remote-presence');\n\nvar util = require('../../util');\n\nvar async = require('async');\n\nvar hat = require('hat');\n\nmodule.exports = Presence;\n\nfunction Presence(connection, channel) {\n  emitter.EventEmitter.call(this);\n\n  if (!channel || typeof channel !== 'string') {\n    throw new Error('Presence channel must be provided');\n  }\n\n  this.connection = connection;\n  this.channel = channel;\n  this.wantSubscribe = false;\n  this.subscribed = false;\n  this.remotePresences = {};\n  this.localPresences = {};\n  this._remotePresenceInstances = {};\n  this._subscriptionCallbacksBySeq = {};\n}\n\nemitter.mixin(Presence);\n\nPresence.prototype.subscribe = function (callback) {\n  this._sendSubscriptionAction(true, callback);\n};\n\nPresence.prototype.unsubscribe = function (callback) {\n  this._sendSubscriptionAction(false, callback);\n};\n\nPresence.prototype.create = function (id) {\n  id = id || hat();\n\n  var localPresence = this._createLocalPresence(id);\n\n  this.localPresences[id] = localPresence;\n  return localPresence;\n};\n\nPresence.prototype.destroy = function (callback) {\n  var presence = this;\n  this.unsubscribe(function (error) {\n    if (error) return presence._callbackOrEmit(error, callback);\n    var localIds = Object.keys(presence.localPresences);\n    var remoteIds = Object.keys(presence._remotePresenceInstances);\n    async.parallel([function (next) {\n      async.each(localIds, function (presenceId, next) {\n        presence.localPresences[presenceId].destroy(next);\n      }, next);\n    }, function (next) {\n      async.each(remoteIds, function (presenceId, next) {\n        presence._remotePresenceInstances[presenceId].destroy(next);\n      }, next);\n    }], function (error) {\n      delete presence.connection._presences[presence.channel];\n\n      presence._callbackOrEmit(error, callback);\n    });\n  });\n};\n\nPresence.prototype._sendSubscriptionAction = function (wantSubscribe, callback) {\n  this.wantSubscribe = !!wantSubscribe;\n  var action = this.wantSubscribe ? 'ps' : 'pu';\n  var seq = this.connection._presenceSeq++;\n  this._subscriptionCallbacksBySeq[seq] = callback;\n\n  if (this.connection.canSend) {\n    this.connection._sendPresenceAction(action, seq, this);\n  }\n};\n\nPresence.prototype._handleSubscribe = function (error, seq) {\n  if (this.wantSubscribe) this.subscribed = true;\n\n  var callback = this._subscriptionCallback(seq);\n\n  this._callbackOrEmit(error, callback);\n};\n\nPresence.prototype._handleUnsubscribe = function (error, seq) {\n  this.subscribed = false;\n\n  var callback = this._subscriptionCallback(seq);\n\n  this._callbackOrEmit(error, callback);\n};\n\nPresence.prototype._receiveUpdate = function (error, message) {\n  var localPresence = util.dig(this.localPresences, message.id);\n  if (localPresence) return localPresence._ack(error, message.pv);\n  if (error) return this.emit('error', error);\n  var presence = this;\n  var remotePresence = util.digOrCreate(this._remotePresenceInstances, message.id, function () {\n    return presence._createRemotePresence(message.id);\n  });\n  remotePresence.receiveUpdate(message);\n};\n\nPresence.prototype._updateRemotePresence = function (remotePresence) {\n  this.remotePresences[remotePresence.presenceId] = remotePresence.value;\n  if (remotePresence.value === null) this._removeRemotePresence(remotePresence.presenceId);\n  this.emit('receive', remotePresence.presenceId, remotePresence.value);\n};\n\nPresence.prototype._broadcastAllLocalPresence = function (error) {\n  if (error) return this.emit('error', error);\n\n  for (var id in this.localPresences) {\n    var localPresence = this.localPresences[id];\n    if (localPresence.value !== null) localPresence.send();\n  }\n};\n\nPresence.prototype._removeRemotePresence = function (id) {\n  this._remotePresenceInstances[id].destroy();\n\n  delete this._remotePresenceInstances[id];\n  delete this.remotePresences[id];\n};\n\nPresence.prototype._onConnectionStateChanged = function () {\n  if (!this.connection.canSend) return;\n\n  this._resubscribe();\n\n  for (var id in this.localPresences) {\n    this.localPresences[id]._sendPending();\n  }\n};\n\nPresence.prototype._resubscribe = function () {\n  var callbacks = [];\n\n  for (var seq in this._subscriptionCallbacksBySeq) {\n    var callback = this._subscriptionCallback(seq);\n\n    callbacks.push(callback);\n  }\n\n  if (!this.wantSubscribe) return this._callEachOrEmit(callbacks);\n  var presence = this;\n  this.subscribe(function (error) {\n    presence._callEachOrEmit(callbacks, error);\n  });\n};\n\nPresence.prototype._subscriptionCallback = function (seq) {\n  var callback = this._subscriptionCallbacksBySeq[seq];\n  delete this._subscriptionCallbacksBySeq[seq];\n  return callback;\n};\n\nPresence.prototype._callbackOrEmit = function (error, callback) {\n  if (callback) return util.nextTick(callback, error);\n  if (error) this.emit('error', error);\n};\n\nPresence.prototype._createLocalPresence = function (id) {\n  return new LocalPresence(this, id);\n};\n\nPresence.prototype._createRemotePresence = function (id) {\n  return new RemotePresence(this, id);\n};\n\nPresence.prototype._callEachOrEmit = function (callbacks, error) {\n  var called = util.callEach(callbacks, error);\n  if (!called && error) this.emit('error', error);\n};","map":null,"metadata":{},"sourceType":"script"}