{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { basicSetup as defaultBasicSetup } from '@codemirror/basic-setup';\nimport { EditorState, StateEffect } from '@codemirror/state';\nimport { indentWithTab as defaultIndentWithTab } from '@codemirror/commands';\nimport { EditorView, keymap, placeholder as extendPlaceholder } from '@codemirror/view';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { defaultLightThemeOption } from './theme/light';\nexport function useCodeMirror(props) {\n  var {\n    value,\n    selection,\n    onChange,\n    onUpdate,\n    extensions = [],\n    autoFocus,\n    theme = 'light',\n    height = '',\n    minHeight = '',\n    maxHeight = '',\n    placeholder = '',\n    width = '',\n    minWidth = '',\n    maxWidth = '',\n    editable = true,\n    indentWithTab = true,\n    basicSetup = true,\n    root\n  } = props;\n  var [container, setContainer] = useState(props.container);\n  var [view, setView] = useState();\n  var [state, setState] = useState();\n  var defaultThemeOption = EditorView.theme({\n    '&': {\n      height,\n      minHeight,\n      maxHeight,\n      width,\n      minWidth,\n      maxWidth\n    }\n  });\n  var updateListener = EditorView.updateListener.of(vu => {\n    if (vu.docChanged && typeof onChange === 'function') {\n      var doc = vu.state.doc;\n\n      var _value = doc.toString();\n\n      onChange(_value, vu);\n    }\n  });\n  var getExtensions = [updateListener, defaultThemeOption];\n\n  if (indentWithTab) {\n    getExtensions.unshift(keymap.of([defaultIndentWithTab]));\n  }\n\n  if (basicSetup) {\n    getExtensions.unshift(defaultBasicSetup);\n  }\n\n  if (placeholder) {\n    getExtensions.unshift(extendPlaceholder(placeholder));\n  }\n\n  switch (theme) {\n    case 'light':\n      getExtensions.push(defaultLightThemeOption);\n      break;\n\n    case 'dark':\n      getExtensions.push(oneDark);\n      break;\n\n    default:\n      getExtensions.push(theme);\n      break;\n  }\n\n  if (editable === false) {\n    getExtensions.push(EditorView.editable.of(false));\n  }\n\n  if (onUpdate && typeof onUpdate === 'function') {\n    getExtensions.push(EditorView.updateListener.of(onUpdate));\n  }\n\n  getExtensions = getExtensions.concat(extensions);\n  useEffect(() => {\n    if (container && !state) {\n      var stateCurrent = EditorState.create({\n        doc: value,\n        selection,\n        extensions: getExtensions\n      });\n      setState(stateCurrent);\n\n      if (!view) {\n        var viewCurrent = new EditorView({\n          state: stateCurrent,\n          parent: container,\n          root\n        });\n        setView(viewCurrent);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [container, state]);\n  useEffect(() => {\n    return () => {\n      if (view) {\n        view.destroy();\n      }\n    };\n  }, [view]);\n  useEffect(() => {\n    if (view) {\n      var currentValue = view.state.doc.toString();\n\n      if (value !== currentValue) {\n        view.dispatch({\n          changes: {\n            from: 0,\n            to: currentValue.length,\n            insert: value || ''\n          }\n        });\n      }\n    }\n  }, [value, view]);\n  useEffect(() => {\n    if (view) {\n      view.dispatch({\n        effects: StateEffect.reconfigure.of(getExtensions)\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [theme, extensions, placeholder, height, minHeight, maxHeight, width, minWidth, maxWidth, editable, indentWithTab, basicSetup]);\n  useEffect(() => {\n    if (autoFocus && view) {\n      view.focus();\n    }\n  }, [autoFocus, view]);\n  return {\n    state,\n    setState,\n    view,\n    setView,\n    container,\n    setContainer\n  };\n}","map":null,"metadata":{},"sourceType":"module"}