{"ast":null,"code":"var Delta = require('quill-delta');\n\nmodule.exports = {\n  Delta: Delta,\n  type: {\n    name: 'rich-text',\n    uri: 'http://sharejs.org/types/rich-text/v1',\n    create: function (initial) {\n      return new Delta(initial);\n    },\n    apply: function (snapshot, delta) {\n      snapshot = new Delta(snapshot);\n      delta = new Delta(delta);\n      return snapshot.compose(delta);\n    },\n    compose: function (delta1, delta2) {\n      delta1 = new Delta(delta1);\n      delta2 = new Delta(delta2);\n      return delta1.compose(delta2);\n    },\n    diff: function (delta1, delta2) {\n      delta1 = new Delta(delta1);\n      delta2 = new Delta(delta2);\n      return delta1.diff(delta2);\n    },\n    transform: function (delta1, delta2, side) {\n      delta1 = new Delta(delta1);\n      delta2 = new Delta(delta2); // Fuzzer specs is in opposite order of delta interface\n\n      return delta2.transform(delta1, side === 'left');\n    },\n    transformCursor: function (cursor, delta, isOwnOp) {\n      return delta.transformPosition(cursor, !isOwnOp);\n    },\n    normalize: function (delta) {\n      return delta; // quill-delta is already canonical\n    },\n    serialize: function (delta) {\n      return delta.ops;\n    },\n    deserialize: function (ops) {\n      return new Delta(ops);\n    },\n    transformPresence: function (range, op, isOwnOp) {\n      if (!range) {\n        return null;\n      }\n\n      const delta = new Delta(op);\n      const start = this.transformCursor(range.index, delta, isOwnOp);\n      const end = this.transformCursor(range.index + range.length, delta, isOwnOp);\n      return Object.assign({}, range, {\n        index: start,\n        length: end - start\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}