{"ast":null,"code":"// These methods let you build a transform function from a transformComponent\n// function for OT types like JSON0 in which operations are lists of components\n// and transforming them requires N^2 work. I find it kind of nasty that I need\n// this, but I'm not really sure what a better solution is. Maybe I should do\n// this automatically to types that don't have a compose function defined.\n// Add transform and transformX functions for an OT type which has\n// transformComponent defined.  transformComponent(destination array,\n// component, other component, side)\nmodule.exports = bootstrapTransform;\n\nfunction bootstrapTransform(type, transformComponent, checkValidOp, append) {\n  var transformComponentX = function (left, right, destLeft, destRight) {\n    transformComponent(destLeft, left, right, 'left');\n    transformComponent(destRight, right, left, 'right');\n  };\n\n  var transformX = type.transformX = function (leftOp, rightOp) {\n    checkValidOp(leftOp);\n    checkValidOp(rightOp);\n    var newRightOp = [];\n\n    for (var i = 0; i < rightOp.length; i++) {\n      var rightComponent = rightOp[i]; // Generate newLeftOp by composing leftOp by rightComponent\n\n      var newLeftOp = [];\n      var k = 0;\n\n      while (k < leftOp.length) {\n        var nextC = [];\n        transformComponentX(leftOp[k], rightComponent, newLeftOp, nextC);\n        k++;\n\n        if (nextC.length === 1) {\n          rightComponent = nextC[0];\n        } else if (nextC.length === 0) {\n          for (var j = k; j < leftOp.length; j++) {\n            append(newLeftOp, leftOp[j]);\n          }\n\n          rightComponent = null;\n          break;\n        } else {\n          // Recurse.\n          var pair = transformX(leftOp.slice(k), nextC);\n\n          for (var l = 0; l < pair[0].length; l++) {\n            append(newLeftOp, pair[0][l]);\n          }\n\n          for (var r = 0; r < pair[1].length; r++) {\n            append(newRightOp, pair[1][r]);\n          }\n\n          rightComponent = null;\n          break;\n        }\n      }\n\n      if (rightComponent != null) {\n        append(newRightOp, rightComponent);\n      }\n\n      leftOp = newLeftOp;\n    }\n\n    return [leftOp, newRightOp];\n  }; // Transforms op with specified type ('left' or 'right') by otherOp.\n\n\n  type.transform = function (op, otherOp, type) {\n    if (!(type === 'left' || type === 'right')) throw new Error(\"type must be 'left' or 'right'\");\n    if (otherOp.length === 0) return op;\n    if (op.length === 1 && otherOp.length === 1) return transformComponent([], op[0], otherOp[0], type);\n    if (type === 'left') return transformX(op, otherOp)[0];else return transformX(otherOp, op)[1];\n  };\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}