{"ast":null,"code":"var RemotePresence = require('./remote-presence');\n\nvar ot = require('../../ot');\n\nmodule.exports = RemoteDocPresence;\n\nfunction RemoteDocPresence(presence, presenceId) {\n  RemotePresence.call(this, presence, presenceId);\n  this.collection = this.presence.collection;\n  this.id = this.presence.id;\n  this.src = null;\n  this.presenceVersion = null;\n  this._doc = this.connection.get(this.collection, this.id);\n  this._pending = null;\n  this._opCache = null;\n  this._pendingSetPending = false;\n  this._opHandler = this._handleOp.bind(this);\n  this._createDelHandler = this._handleCreateDel.bind(this);\n  this._loadHandler = this._handleLoad.bind(this);\n\n  this._registerWithDoc();\n}\n\nRemoteDocPresence.prototype = Object.create(RemotePresence.prototype);\n\nRemoteDocPresence.prototype.receiveUpdate = function (message) {\n  if (this._pending && message.pv < this._pending.pv) return;\n  this.src = message.src;\n  this._pending = message;\n\n  this._setPendingPresence();\n};\n\nRemoteDocPresence.prototype.destroy = function (callback) {\n  this._doc.removeListener('op', this._opHandler);\n\n  this._doc.removeListener('create', this._createDelHandler);\n\n  this._doc.removeListener('del', this._createDelHandler);\n\n  this._doc.removeListener('load', this._loadHandler);\n\n  RemotePresence.prototype.destroy.call(this, callback);\n};\n\nRemoteDocPresence.prototype._registerWithDoc = function () {\n  this._doc.on('op', this._opHandler);\n\n  this._doc.on('create', this._createDelHandler);\n\n  this._doc.on('del', this._createDelHandler);\n\n  this._doc.on('load', this._loadHandler);\n};\n\nRemoteDocPresence.prototype._setPendingPresence = function () {\n  if (this._pendingSetPending) return;\n  this._pendingSetPending = true;\n  var presence = this;\n\n  this._doc.whenNothingPending(function () {\n    presence._pendingSetPending = false;\n    if (!presence._pending) return;\n    if (presence._pending.pv < presence.presenceVersion) return presence._pending = null;\n\n    if (presence._pending.v > presence._doc.version) {\n      return presence._doc.fetch();\n    }\n\n    if (!presence._catchUpStalePresence()) return;\n    presence.value = presence._pending.p;\n    presence.presenceVersion = presence._pending.pv;\n    presence._pending = null;\n\n    presence.presence._updateRemotePresence(presence);\n  });\n};\n\nRemoteDocPresence.prototype._handleOp = function (op, source, connectionId) {\n  var isOwnOp = connectionId === this.src;\n\n  this._transformAgainstOp(op, isOwnOp);\n\n  this._cacheOp(op, isOwnOp);\n\n  this._setPendingPresence();\n};\n\nRemotePresence.prototype._handleCreateDel = function () {\n  this._cacheOp(null);\n\n  this._setPendingPresence();\n};\n\nRemotePresence.prototype._handleLoad = function () {\n  this.value = null;\n  this._pending = null;\n  this._opCache = null;\n\n  this.presence._updateRemotePresence(this);\n};\n\nRemoteDocPresence.prototype._transformAgainstOp = function (op, isOwnOp) {\n  if (!this.value) return;\n\n  try {\n    this.value = this._doc.type.transformPresence(this.value, op, isOwnOp);\n  } catch (error) {\n    return this.presence.emit('error', error);\n  }\n\n  this.presence._updateRemotePresence(this);\n};\n\nRemoteDocPresence.prototype._catchUpStalePresence = function () {\n  if (this._pending.v >= this._doc.version) return true;\n\n  if (!this._opCache) {\n    this._startCachingOps();\n\n    this._doc.fetch(); // We're already subscribed, but we send another subscribe message\n    // to force presence updates from other clients\n\n\n    this.presence.subscribe();\n    return false;\n  }\n\n  while (this._opCache[this._pending.v]) {\n    var item = this._opCache[this._pending.v];\n    var op = item.op;\n    var isOwnOp = item.isOwnOp; // We use a null op to signify a create or a delete operation. In both\n    // cases we just want to reset the presence (which doesn't make sense\n    // in a new document), so just set the presence to null.\n\n    if (op === null) {\n      this._pending.p = null;\n      this._pending.v++;\n    } else {\n      ot.transformPresence(this._pending, op, isOwnOp);\n    }\n  }\n\n  var hasCaughtUp = this._pending.v >= this._doc.version;\n\n  if (hasCaughtUp) {\n    this._stopCachingOps();\n  }\n\n  return hasCaughtUp;\n};\n\nRemoteDocPresence.prototype._startCachingOps = function () {\n  this._opCache = [];\n};\n\nRemoteDocPresence.prototype._stopCachingOps = function () {\n  this._opCache = null;\n};\n\nRemoteDocPresence.prototype._cacheOp = function (op, isOwnOp) {\n  if (this._opCache) {\n    op = op ? {\n      op: op\n    } : null; // Subtract 1 from the current doc version, because an op with v3\n    // should be read as the op that takes a doc from v3 -> v4\n\n    this._opCache[this._doc.version - 1] = {\n      op: op,\n      isOwnOp: isOwnOp\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}