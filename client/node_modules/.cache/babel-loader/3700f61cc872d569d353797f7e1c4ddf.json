{"ast":null,"code":"// DEPRECATED!\n//\n// This type works, but is not exported. Its included here because the JSON0\n// embedded string operations use this library.\n// A simple text implementation\n//\n// Operations are lists of components. Each component either inserts or deletes\n// at a specified position in the document.\n//\n// Components are either:\n//  {i:'str', p:100}: Insert 'str' at position 100 in the document\n//  {d:'str', p:100}: Delete 'str' at position 100 in the document\n//\n// Components in an operation are executed sequentially, so the position of components\n// assumes previous components have already executed.\n//\n// Eg: This op:\n//   [{i:'abc', p:0}]\n// is equivalent to this op:\n//   [{i:'a', p:0}, {i:'b', p:1}, {i:'c', p:2}]\nvar text = module.exports = {\n  name: 'text0',\n  uri: 'http://sharejs.org/types/textv0',\n  create: function (initial) {\n    if (initial != null && typeof initial !== 'string') {\n      throw new Error('Initial data must be a string');\n    }\n\n    return initial || '';\n  }\n};\n/** Insert s2 into s1 at pos. */\n\nvar strInject = function (s1, pos, s2) {\n  return s1.slice(0, pos) + s2 + s1.slice(pos);\n};\n/** Check that an operation component is valid. Throws if its invalid. */\n\n\nvar checkValidComponent = function (c) {\n  if (typeof c.p !== 'number') throw new Error('component missing position field');\n  if (typeof c.i === 'string' === (typeof c.d === 'string')) throw new Error('component needs an i or d field');\n  if (c.p < 0) throw new Error('position cannot be negative');\n};\n/** Check that an operation is valid */\n\n\nvar checkValidOp = function (op) {\n  for (var i = 0; i < op.length; i++) {\n    checkValidComponent(op[i]);\n  }\n};\n/** Apply op to snapshot */\n\n\ntext.apply = function (snapshot, op) {\n  var deleted;\n  checkValidOp(op);\n\n  for (var i = 0; i < op.length; i++) {\n    var component = op[i];\n\n    if (component.i != null) {\n      snapshot = strInject(snapshot, component.p, component.i);\n    } else {\n      deleted = snapshot.slice(component.p, component.p + component.d.length);\n      if (component.d !== deleted) throw new Error(\"Delete component '\" + component.d + \"' does not match deleted text '\" + deleted + \"'\");\n      snapshot = snapshot.slice(0, component.p) + snapshot.slice(component.p + component.d.length);\n    }\n  }\n\n  return snapshot;\n};\n/**\n * Append a component to the end of newOp. Exported for use by the random op\n * generator and the JSON0 type.\n */\n\n\nvar append = text._append = function (newOp, c) {\n  if (c.i === '' || c.d === '') return;\n\n  if (newOp.length === 0) {\n    newOp.push(c);\n  } else {\n    var last = newOp[newOp.length - 1];\n\n    if (last.i != null && c.i != null && last.p <= c.p && c.p <= last.p + last.i.length) {\n      // Compose the insert into the previous insert\n      newOp[newOp.length - 1] = {\n        i: strInject(last.i, c.p - last.p, c.i),\n        p: last.p\n      };\n    } else if (last.d != null && c.d != null && c.p <= last.p && last.p <= c.p + c.d.length) {\n      // Compose the deletes together\n      newOp[newOp.length - 1] = {\n        d: strInject(c.d, last.p - c.p, last.d),\n        p: c.p\n      };\n    } else {\n      newOp.push(c);\n    }\n  }\n};\n/** Compose op1 and op2 together */\n\n\ntext.compose = function (op1, op2) {\n  checkValidOp(op1);\n  checkValidOp(op2);\n  var newOp = op1.slice();\n\n  for (var i = 0; i < op2.length; i++) {\n    append(newOp, op2[i]);\n  }\n\n  return newOp;\n};\n/** Clean up an op */\n\n\ntext.normalize = function (op) {\n  var newOp = []; // Normalize should allow ops which are a single (unwrapped) component:\n  // {i:'asdf', p:23}.\n  // There's no good way to test if something is an array:\n  // http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\n  // so this is probably the least bad solution.\n\n  if (op.i != null || op.p != null) op = [op];\n\n  for (var i = 0; i < op.length; i++) {\n    var c = op[i];\n    if (c.p == null) c.p = 0;\n    append(newOp, c);\n  }\n\n  return newOp;\n}; // This helper method transforms a position by an op component.\n//\n// If c is an insert, insertAfter specifies whether the transform\n// is pushed after the insert (true) or before it (false).\n//\n// insertAfter is optional for deletes.\n\n\nvar transformPosition = function (pos, c, insertAfter) {\n  // This will get collapsed into a giant ternary by uglify.\n  if (c.i != null) {\n    if (c.p < pos || c.p === pos && insertAfter) {\n      return pos + c.i.length;\n    } else {\n      return pos;\n    }\n  } else {\n    // I think this could also be written as: Math.min(c.p, Math.min(c.p -\n    // otherC.p, otherC.d.length)) but I think its harder to read that way, and\n    // it compiles using ternary operators anyway so its no slower written like\n    // this.\n    if (pos <= c.p) {\n      return pos;\n    } else if (pos <= c.p + c.d.length) {\n      return c.p;\n    } else {\n      return pos - c.d.length;\n    }\n  }\n}; // Helper method to transform a cursor position as a result of an op.\n//\n// Like transformPosition above, if c is an insert, insertAfter specifies\n// whether the cursor position is pushed after an insert (true) or before it\n// (false).\n\n\ntext.transformCursor = function (position, op, side) {\n  var insertAfter = side === 'right';\n\n  for (var i = 0; i < op.length; i++) {\n    position = transformPosition(position, op[i], insertAfter);\n  }\n\n  return position;\n}; // Transform an op component by another op component. Asymmetric.\n// The result will be appended to destination.\n//\n// exported for use in JSON type\n\n\nvar transformComponent = text._tc = function (dest, c, otherC, side) {\n  //var cIntersect, intersectEnd, intersectStart, newC, otherIntersect, s;\n  checkValidComponent(c);\n  checkValidComponent(otherC);\n\n  if (c.i != null) {\n    // Insert.\n    append(dest, {\n      i: c.i,\n      p: transformPosition(c.p, otherC, side === 'right')\n    });\n  } else {\n    // Delete\n    if (otherC.i != null) {\n      // Delete vs insert\n      var s = c.d;\n\n      if (c.p < otherC.p) {\n        append(dest, {\n          d: s.slice(0, otherC.p - c.p),\n          p: c.p\n        });\n        s = s.slice(otherC.p - c.p);\n      }\n\n      if (s !== '') append(dest, {\n        d: s,\n        p: c.p + otherC.i.length\n      });\n    } else {\n      // Delete vs delete\n      if (c.p >= otherC.p + otherC.d.length) append(dest, {\n        d: c.d,\n        p: c.p - otherC.d.length\n      });else if (c.p + c.d.length <= otherC.p) append(dest, c);else {\n        // They overlap somewhere.\n        var newC = {\n          d: '',\n          p: c.p\n        };\n        if (c.p < otherC.p) newC.d = c.d.slice(0, otherC.p - c.p);\n        if (c.p + c.d.length > otherC.p + otherC.d.length) newC.d += c.d.slice(otherC.p + otherC.d.length - c.p); // This is entirely optional - I'm just checking the deleted text in\n        // the two ops matches\n\n        var intersectStart = Math.max(c.p, otherC.p);\n        var intersectEnd = Math.min(c.p + c.d.length, otherC.p + otherC.d.length);\n        var cIntersect = c.d.slice(intersectStart - c.p, intersectEnd - c.p);\n        var otherIntersect = otherC.d.slice(intersectStart - otherC.p, intersectEnd - otherC.p);\n        if (cIntersect !== otherIntersect) throw new Error('Delete ops delete different text in the same region of the document');\n\n        if (newC.d !== '') {\n          newC.p = transformPosition(newC.p, otherC);\n          append(dest, newC);\n        }\n      }\n    }\n  }\n\n  return dest;\n};\n\nvar invertComponent = function (c) {\n  return c.i != null ? {\n    d: c.i,\n    p: c.p\n  } : {\n    i: c.d,\n    p: c.p\n  };\n}; // No need to use append for invert, because the components won't be able to\n// cancel one another.\n\n\ntext.invert = function (op) {\n  // Shallow copy & reverse that sucka.\n  op = op.slice().reverse();\n\n  for (var i = 0; i < op.length; i++) {\n    op[i] = invertComponent(op[i]);\n  }\n\n  return op;\n};\n\nrequire('./bootstrapTransform')(text, transformComponent, checkValidOp, append);","map":null,"metadata":{},"sourceType":"script"}