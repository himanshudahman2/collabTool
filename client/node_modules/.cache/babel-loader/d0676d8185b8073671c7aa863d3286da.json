{"ast":null,"code":"var LocalPresence = require('./local-presence');\n\nvar ShareDBError = require('../../error');\n\nvar util = require('../../util');\n\nvar ERROR_CODE = ShareDBError.CODES;\nmodule.exports = LocalDocPresence;\n\nfunction LocalDocPresence(presence, presenceId) {\n  LocalPresence.call(this, presence, presenceId);\n  this.collection = this.presence.collection;\n  this.id = this.presence.id;\n  this._doc = this.connection.get(this.collection, this.id);\n  this._isSending = false;\n  this._opHandler = this._transformAgainstOp.bind(this);\n  this._createOrDelHandler = this._handleCreateOrDel.bind(this);\n  this._loadHandler = this._handleLoad.bind(this);\n  this._destroyHandler = this.destroy.bind(this);\n\n  this._registerWithDoc();\n}\n\nLocalDocPresence.prototype = Object.create(LocalPresence.prototype);\n\nLocalDocPresence.prototype.submit = function (value, callback) {\n  if (!this._doc.type) {\n    // If the Doc hasn't been created, we already assume all presence to\n    // be null. Let's early return, instead of error since this is a harmless\n    // no-op\n    if (value === null) return this._callbackOrEmit(null, callback);\n    var error = {\n      code: ERROR_CODE.ERR_DOC_DOES_NOT_EXIST,\n      message: 'Cannot submit presence. Document has not been created'\n    };\n    return this._callbackOrEmit(error, callback);\n  }\n\n  ;\n  LocalPresence.prototype.submit.call(this, value, callback);\n};\n\nLocalDocPresence.prototype.destroy = function (callback) {\n  this._doc.removeListener('op', this._opHandler);\n\n  this._doc.removeListener('create', this._createOrDelHandler);\n\n  this._doc.removeListener('del', this._createOrDelHandler);\n\n  this._doc.removeListener('load', this._loadHandler);\n\n  this._doc.removeListener('destroy', this._destroyHandler);\n\n  LocalPresence.prototype.destroy.call(this, callback);\n};\n\nLocalDocPresence.prototype._sendPending = function () {\n  if (this._isSending) return;\n  this._isSending = true;\n  var presence = this;\n\n  this._doc.whenNothingPending(function () {\n    presence._isSending = false;\n    if (!presence.connection.canSend) return;\n\n    presence._pendingMessages.forEach(function (message) {\n      message.t = presence._doc.type.uri;\n      message.v = presence._doc.version;\n      presence.connection.send(message);\n    });\n\n    presence._pendingMessages = [];\n  });\n};\n\nLocalDocPresence.prototype._registerWithDoc = function () {\n  this._doc.on('op', this._opHandler);\n\n  this._doc.on('create', this._createOrDelHandler);\n\n  this._doc.on('del', this._createOrDelHandler);\n\n  this._doc.on('load', this._loadHandler);\n\n  this._doc.on('destroy', this._destroyHandler);\n};\n\nLocalDocPresence.prototype._transformAgainstOp = function (op, source) {\n  var presence = this;\n\n  this._pendingMessages.forEach(function (message) {\n    try {\n      message.p = presence._transformPresence(message.p, op, source);\n    } catch (error) {\n      var callback = presence._getCallback(message.pv);\n\n      presence._callbackOrEmit(error, callback);\n    }\n  });\n\n  try {\n    this.value = this._transformPresence(this.value, op, source);\n  } catch (error) {\n    this.emit('error', error);\n  }\n};\n\nLocalDocPresence.prototype._handleCreateOrDel = function () {\n  this._pendingMessages.forEach(function (message) {\n    message.p = null;\n  });\n\n  this.value = null;\n};\n\nLocalDocPresence.prototype._handleLoad = function () {\n  this.value = null;\n  this._pendingMessages = [];\n};\n\nLocalDocPresence.prototype._message = function () {\n  var message = LocalPresence.prototype._message.call(this);\n\n  message.c = this.collection, message.d = this.id, message.v = null;\n  message.t = null;\n  return message;\n};\n\nLocalDocPresence.prototype._transformPresence = function (value, op, source) {\n  var type = this._doc.type;\n\n  if (!util.supportsPresence(type)) {\n    throw new ShareDBError(ERROR_CODE.ERR_TYPE_DOES_NOT_SUPPORT_PRESENCE, 'Type does not support presence: ' + type.name);\n  }\n\n  return type.transformPresence(value, op, source);\n};","map":null,"metadata":{},"sourceType":"script"}