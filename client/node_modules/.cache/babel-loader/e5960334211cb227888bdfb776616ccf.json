{"ast":null,"code":"import { Parser, NodeSet, NodeType, DefaultBufferLength, NodeProp, Tree } from '@lezer/common'; /// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\n\nclass Stack {\n  /// @internal\n  constructor( /// The parse that this stack is part of @internal\n  p, /// Holds state, input pos, buffer index triplets for all but the\n  /// top state @internal\n  stack, /// The current parse state @internal\n  state, // The position at which the next reduce should take place. This\n  // can be less than `this.pos` when skipped expressions have been\n  // added to the stack (which should be moved outside of the next\n  // reduction)\n  /// @internal\n  reducePos, /// The input position up to which this stack has parsed.\n  pos, /// The dynamic score of the stack, including dynamic precedence\n  /// and error-recovery penalties\n  /// @internal\n  score, // The output buffer. Holds (type, start, end, size) quads\n  // representing nodes created by the parser, where `size` is\n  // amount of buffer array entries covered by this node.\n  /// @internal\n  buffer, // The base offset of the buffer. When stacks are split, the split\n  // instance shared the buffer history with its parent up to\n  // `bufferBase`, which is the absolute offset (including the\n  // offset of previous splits) into the buffer at which this stack\n  // starts writing.\n  /// @internal\n  bufferBase, /// @internal\n  curContext) {\n    let lookAhead = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent = arguments.length > 10 ? arguments[10] : undefined;\n    this.p = p;\n    this.stack = stack;\n    this.state = state;\n    this.reducePos = reducePos;\n    this.pos = pos;\n    this.score = score;\n    this.buffer = buffer;\n    this.bufferBase = bufferBase;\n    this.curContext = curContext;\n    this.lookAhead = lookAhead;\n    this.parent = parent;\n  } /// @internal\n\n\n  toString() {\n    return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n  } // Start an empty stack\n  /// @internal\n\n\n  static start(p, state) {\n    let pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let cx = p.parser.context;\n    return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n  } /// The stack's current [context](#lr.ContextTracker) value, if\n  /// any. Its type will depend on the context tracker's type\n  /// parameter, or it will be `null` if there is no context\n  /// tracker.\n\n\n  get context() {\n    return this.curContext ? this.curContext.context : null;\n  } // Push a state onto the stack, tracking its start position as well\n  // as the buffer base at that point.\n  /// @internal\n\n\n  pushState(state, start) {\n    this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n    this.state = state;\n  } // Apply a reduce action\n  /// @internal\n\n\n  reduce(action) {\n    let depth = action >> 19\n    /* ReduceDepthShift */\n    ,\n        type = action & 65535\n    /* ValueMask */\n    ;\n    let {\n      parser\n    } = this.p;\n    let dPrec = parser.dynamicPrecedence(type);\n    if (dPrec) this.score += dPrec;\n\n    if (depth == 0) {\n      // Zero-depth reductions are a special caseâ€”they add stuff to\n      // the stack without popping anything off.\n      if (type < parser.minRepeatTerm) this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n      this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n      this.reduceContext(type, this.reducePos);\n      return;\n    } // Find the base index into `this.stack`, content after which will\n    // be dropped. Note that with `StayFlag` reductions we need to\n    // consume two extra frames (the dummy parent node for the skipped\n    // expression and the state that we'll be staying in, which should\n    // be moved to `this.state`).\n\n\n    let base = this.stack.length - (depth - 1) * 3 - (action & 262144\n    /* StayFlag */\n    ? 6 : 0);\n    let start = this.stack[base - 2];\n    let bufferBase = this.stack[base - 1],\n        count = this.bufferBase + this.buffer.length - bufferBase; // Store normal terms or `R -> R R` repeat reductions\n\n    if (type < parser.minRepeatTerm || action & 131072\n    /* RepeatFlag */\n    ) {\n      let pos = parser.stateFlag(this.state, 1\n      /* Skipped */\n      ) ? this.pos : this.reducePos;\n      this.storeNode(type, start, pos, count + 4, true);\n    }\n\n    if (action & 262144\n    /* StayFlag */\n    ) {\n      this.state = this.stack[base];\n    } else {\n      let baseStateID = this.stack[base - 3];\n      this.state = parser.getGoto(baseStateID, type, true);\n    }\n\n    while (this.stack.length > base) this.stack.pop();\n\n    this.reduceContext(type, start);\n  } // Shift a value into the buffer\n  /// @internal\n\n\n  storeNode(term, start, end) {\n    let size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;\n    let isReduce = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    if (term == 0\n    /* Err */\n    ) {\n      // Try to omit/merge adjacent error nodes\n      let cur = this,\n          top = this.buffer.length;\n\n      if (top == 0 && cur.parent) {\n        top = cur.bufferBase - cur.parent.bufferBase;\n        cur = cur.parent;\n      }\n\n      if (top > 0 && cur.buffer[top - 4] == 0\n      /* Err */\n      && cur.buffer[top - 1] > -1) {\n        if (start == end) return;\n\n        if (cur.buffer[top - 2] >= start) {\n          cur.buffer[top - 2] = end;\n          return;\n        }\n      }\n    }\n\n    if (!isReduce || this.pos == end) {\n      // Simple case, just append\n      this.buffer.push(term, start, end, size);\n    } else {\n      // There may be skipped nodes that have to be moved forward\n      let index = this.buffer.length;\n      if (index > 0 && this.buffer[index - 4] != 0\n      /* Err */\n      ) while (index > 0 && this.buffer[index - 2] > end) {\n        // Move this record forward\n        this.buffer[index] = this.buffer[index - 4];\n        this.buffer[index + 1] = this.buffer[index - 3];\n        this.buffer[index + 2] = this.buffer[index - 2];\n        this.buffer[index + 3] = this.buffer[index - 1];\n        index -= 4;\n        if (size > 4) size -= 4;\n      }\n      this.buffer[index] = term;\n      this.buffer[index + 1] = start;\n      this.buffer[index + 2] = end;\n      this.buffer[index + 3] = size;\n    }\n  } // Apply a shift action\n  /// @internal\n\n\n  shift(action, next, nextEnd) {\n    let start = this.pos;\n\n    if (action & 131072\n    /* GotoFlag */\n    ) {\n      this.pushState(action & 65535\n      /* ValueMask */\n      , this.pos);\n    } else if ((action & 262144\n    /* StayFlag */\n    ) == 0) {\n      // Regular shift\n      let nextState = action,\n          {\n        parser\n      } = this.p;\n\n      if (nextEnd > this.pos || next <= parser.maxNode) {\n        this.pos = nextEnd;\n        if (!parser.stateFlag(nextState, 1\n        /* Skipped */\n        )) this.reducePos = nextEnd;\n      }\n\n      this.pushState(nextState, start);\n      this.shiftContext(next, start);\n      if (next <= parser.maxNode) this.buffer.push(next, start, nextEnd, 4);\n    } else {\n      // Shift-and-stay, which means this is a skipped token\n      this.pos = nextEnd;\n      this.shiftContext(next, start);\n      if (next <= this.p.parser.maxNode) this.buffer.push(next, start, nextEnd, 4);\n    }\n  } // Apply an action\n  /// @internal\n\n\n  apply(action, next, nextEnd) {\n    if (action & 65536\n    /* ReduceFlag */\n    ) this.reduce(action);else this.shift(action, next, nextEnd);\n  } // Add a prebuilt (reused) node into the buffer.\n  /// @internal\n\n\n  useNode(value, next) {\n    let index = this.p.reused.length - 1;\n\n    if (index < 0 || this.p.reused[index] != value) {\n      this.p.reused.push(value);\n      index++;\n    }\n\n    let start = this.pos;\n    this.reducePos = this.pos = start + value.length;\n    this.pushState(next, start);\n    this.buffer.push(index, start, this.reducePos, -1\n    /* size == -1 means this is a reused value */\n    );\n    if (this.curContext) this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n  } // Split the stack. Due to the buffer sharing and the fact\n  // that `this.stack` tends to stay quite shallow, this isn't very\n  // expensive.\n  /// @internal\n\n\n  split() {\n    let parent = this;\n    let off = parent.buffer.length; // Because the top of the buffer (after this.pos) may be mutated\n    // to reorder reductions and skipped tokens, and shared buffers\n    // should be immutable, this copies any outstanding skipped tokens\n    // to the new buffer, and puts the base pointer before them.\n\n    while (off > 0 && parent.buffer[off - 2] > parent.reducePos) off -= 4;\n\n    let buffer = parent.buffer.slice(off),\n        base = parent.bufferBase + off; // Make sure parent points to an actual parent with content, if there is such a parent.\n\n    while (parent && base == parent.bufferBase) parent = parent.parent;\n\n    return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n  } // Try to recover from an error by 'deleting' (ignoring) one token.\n  /// @internal\n\n\n  recoverByDelete(next, nextEnd) {\n    let isNode = next <= this.p.parser.maxNode;\n    if (isNode) this.storeNode(next, this.pos, nextEnd, 4);\n    this.storeNode(0\n    /* Err */\n    , this.pos, nextEnd, isNode ? 8 : 4);\n    this.pos = this.reducePos = nextEnd;\n    this.score -= 190\n    /* Delete */\n    ;\n  } /// Check if the given term would be able to be shifted (optionally\n  /// after some reductions) on this stack. This can be useful for\n  /// external tokenizers that want to make sure they only provide a\n  /// given token when it applies.\n\n\n  canShift(term) {\n    for (let sim = new SimulatedStack(this);;) {\n      let action = this.p.parser.stateSlot(sim.state, 4\n      /* DefaultReduce */\n      ) || this.p.parser.hasAction(sim.state, term);\n      if ((action & 65536\n      /* ReduceFlag */\n      ) == 0) return true;\n      if (action == 0) return false;\n      sim.reduce(action);\n    }\n  } // Apply up to Recover.MaxNext recovery actions that conceptually\n  // inserts some missing token or rule.\n  /// @internal\n\n\n  recoverByInsert(next) {\n    if (this.stack.length >= 300\n    /* MaxInsertStackDepth */\n    ) return [];\n    let nextStates = this.p.parser.nextStates(this.state);\n\n    if (nextStates.length > 4\n    /* MaxNext */\n    << 1 || this.stack.length >= 120\n    /* DampenInsertStackDepth */\n    ) {\n      let best = [];\n\n      for (let i = 0, s; i < nextStates.length; i += 2) {\n        if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next)) best.push(nextStates[i], s);\n      }\n\n      if (this.stack.length < 120\n      /* DampenInsertStackDepth */\n      ) for (let i = 0; best.length < 4\n      /* MaxNext */\n      << 1 && i < nextStates.length; i += 2) {\n        let s = nextStates[i + 1];\n        if (!best.some((v, i) => i & 1 && v == s)) best.push(nextStates[i], s);\n      }\n      nextStates = best;\n    }\n\n    let result = [];\n\n    for (let i = 0; i < nextStates.length && result.length < 4\n    /* MaxNext */\n    ; i += 2) {\n      let s = nextStates[i + 1];\n      if (s == this.state) continue;\n      let stack = this.split();\n      stack.storeNode(0\n      /* Err */\n      , stack.pos, stack.pos, 4, true);\n      stack.pushState(s, this.pos);\n      stack.shiftContext(nextStates[i], this.pos);\n      stack.score -= 200\n      /* Insert */\n      ;\n      result.push(stack);\n    }\n\n    return result;\n  } // Force a reduce, if possible. Return false if that can't\n  // be done.\n  /// @internal\n\n\n  forceReduce() {\n    let reduce = this.p.parser.stateSlot(this.state, 5\n    /* ForcedReduce */\n    );\n    if ((reduce & 65536\n    /* ReduceFlag */\n    ) == 0) return false;\n    let {\n      parser\n    } = this.p;\n\n    if (!parser.validAction(this.state, reduce)) {\n      let depth = reduce >> 19\n      /* ReduceDepthShift */\n      ,\n          term = reduce & 65535\n      /* ValueMask */\n      ;\n      let target = this.stack.length - depth * 3;\n      if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) return false;\n      this.storeNode(0\n      /* Err */\n      , this.reducePos, this.reducePos, 4, true);\n      this.score -= 100\n      /* Reduce */\n      ;\n    }\n\n    this.reduce(reduce);\n    return true;\n  } /// @internal\n\n\n  forceAll() {\n    while (!this.p.parser.stateFlag(this.state, 2\n    /* Accepting */\n    )) {\n      if (!this.forceReduce()) {\n        this.storeNode(0\n        /* Err */\n        , this.pos, this.pos, 4, true);\n        break;\n      }\n    }\n\n    return this;\n  } /// Check whether this state has no further actions (assumed to be a direct descendant of the\n  /// top state, since any other states must be able to continue\n  /// somehow). @internal\n\n\n  get deadEnd() {\n    if (this.stack.length != 3) return false;\n    let {\n      parser\n    } = this.p;\n    return parser.data[parser.stateSlot(this.state, 1\n    /* Actions */\n    )] == 65535\n    /* End */\n    && !parser.stateSlot(this.state, 4\n    /* DefaultReduce */\n    );\n  } /// Restart the stack (put it back in its start state). Only safe\n  /// when this.stack.length == 3 (state is directly below the top\n  /// state). @internal\n\n\n  restart() {\n    this.state = this.stack[0];\n    this.stack.length = 0;\n  } /// @internal\n\n\n  sameState(other) {\n    if (this.state != other.state || this.stack.length != other.stack.length) return false;\n\n    for (let i = 0; i < this.stack.length; i += 3) if (this.stack[i] != other.stack[i]) return false;\n\n    return true;\n  } /// Get the parser used by this stack.\n\n\n  get parser() {\n    return this.p.parser;\n  } /// Test whether a given dialect (by numeric ID, as exported from\n  /// the terms file) is enabled.\n\n\n  dialectEnabled(dialectID) {\n    return this.p.parser.dialect.flags[dialectID];\n  }\n\n  shiftContext(term, start) {\n    if (this.curContext) this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n  }\n\n  reduceContext(term, start) {\n    if (this.curContext) this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n  } /// @internal\n\n\n  emitContext() {\n    let last = this.buffer.length - 1;\n    if (last < 0 || this.buffer[last] != -3) this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n  } /// @internal\n\n\n  emitLookAhead() {\n    let last = this.buffer.length - 1;\n    if (last < 0 || this.buffer[last] != -4) this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n  }\n\n  updateContext(context) {\n    if (context != this.curContext.context) {\n      let newCx = new StackContext(this.curContext.tracker, context);\n      if (newCx.hash != this.curContext.hash) this.emitContext();\n      this.curContext = newCx;\n    }\n  } /// @internal\n\n\n  setLookAhead(lookAhead) {\n    if (lookAhead > this.lookAhead) {\n      this.emitLookAhead();\n      this.lookAhead = lookAhead;\n    }\n  } /// @internal\n\n\n  close() {\n    if (this.curContext && this.curContext.tracker.strict) this.emitContext();\n    if (this.lookAhead > 0) this.emitLookAhead();\n  }\n\n}\n\nclass StackContext {\n  constructor(tracker, context) {\n    this.tracker = tracker;\n    this.context = context;\n    this.hash = tracker.strict ? tracker.hash(context) : 0;\n  }\n\n}\n\nvar Recover;\n\n(function (Recover) {\n  Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n  Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n  Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n  Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n  Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n  Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n})(Recover || (Recover = {})); // Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\n\n\nclass SimulatedStack {\n  constructor(start) {\n    this.start = start;\n    this.state = start.state;\n    this.stack = start.stack;\n    this.base = this.stack.length;\n  }\n\n  reduce(action) {\n    let term = action & 65535\n    /* ValueMask */\n    ,\n        depth = action >> 19\n    /* ReduceDepthShift */\n    ;\n\n    if (depth == 0) {\n      if (this.stack == this.start.stack) this.stack = this.stack.slice();\n      this.stack.push(this.state, 0, 0);\n      this.base += 3;\n    } else {\n      this.base -= (depth - 1) * 3;\n    }\n\n    let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n    this.state = goto;\n  }\n\n} // This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\n\n\nclass StackBufferCursor {\n  constructor(stack, pos, index) {\n    this.stack = stack;\n    this.pos = pos;\n    this.index = index;\n    this.buffer = stack.buffer;\n    if (this.index == 0) this.maybeNext();\n  }\n\n  static create(stack) {\n    let pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stack.bufferBase + stack.buffer.length;\n    return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n  }\n\n  maybeNext() {\n    let next = this.stack.parent;\n\n    if (next != null) {\n      this.index = this.stack.bufferBase - next.bufferBase;\n      this.stack = next;\n      this.buffer = next.buffer;\n    }\n  }\n\n  get id() {\n    return this.buffer[this.index - 4];\n  }\n\n  get start() {\n    return this.buffer[this.index - 3];\n  }\n\n  get end() {\n    return this.buffer[this.index - 2];\n  }\n\n  get size() {\n    return this.buffer[this.index - 1];\n  }\n\n  next() {\n    this.index -= 4;\n    this.pos -= 4;\n    if (this.index == 0) this.maybeNext();\n  }\n\n  fork() {\n    return new StackBufferCursor(this.stack, this.pos, this.index);\n  }\n\n}\n\nclass CachedToken {\n  constructor() {\n    this.start = -1;\n    this.value = -1;\n    this.end = -1;\n    this.extended = -1;\n    this.lookAhead = 0;\n    this.mask = 0;\n    this.context = 0;\n  }\n\n}\n\nconst nullToken = new CachedToken(); /// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\n\nclass InputStream {\n  /// @internal\n  constructor( /// @internal\n  input, /// @internal\n  ranges) {\n    this.input = input;\n    this.ranges = ranges; /// @internal\n\n    this.chunk = \"\"; /// @internal\n\n    this.chunkOff = 0; /// Backup chunk\n\n    this.chunk2 = \"\";\n    this.chunk2Pos = 0; /// The character code of the next code unit in the input, or -1\n    /// when the stream is at the end of the input.\n\n    this.next = -1; /// @internal\n\n    this.token = nullToken;\n    this.rangeIndex = 0;\n    this.pos = this.chunkPos = ranges[0].from;\n    this.range = ranges[0];\n    this.end = ranges[ranges.length - 1].to;\n    this.readNext();\n  }\n\n  resolveOffset(offset, assoc) {\n    let range = this.range,\n        index = this.rangeIndex;\n    let pos = this.pos + offset;\n\n    while (pos < range.from) {\n      if (!index) return null;\n      let next = this.ranges[--index];\n      pos -= range.from - next.to;\n      range = next;\n    }\n\n    while (assoc < 0 ? pos > range.to : pos >= range.to) {\n      if (index == this.ranges.length - 1) return null;\n      let next = this.ranges[++index];\n      pos += next.from - range.to;\n      range = next;\n    }\n\n    return pos;\n  } /// Look at a code unit near the stream position. `.peek(0)` equals\n  /// `.next`, `.peek(-1)` gives you the previous character, and so\n  /// on.\n  ///\n  /// Note that looking around during tokenizing creates dependencies\n  /// on potentially far-away content, which may reduce the\n  /// effectiveness incremental parsingâ€”when looking forwardâ€”or even\n  /// cause invalid reparses when looking backward more than 25 code\n  /// units, since the library does not track lookbehind.\n\n\n  peek(offset) {\n    let idx = this.chunkOff + offset,\n        pos,\n        result;\n\n    if (idx >= 0 && idx < this.chunk.length) {\n      pos = this.pos + offset;\n      result = this.chunk.charCodeAt(idx);\n    } else {\n      let resolved = this.resolveOffset(offset, 1);\n      if (resolved == null) return -1;\n      pos = resolved;\n\n      if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n        result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n      } else {\n        let i = this.rangeIndex,\n            range = this.range;\n\n        while (range.to <= pos) range = this.ranges[++i];\n\n        this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n        if (pos + this.chunk2.length > range.to) this.chunk2 = this.chunk2.slice(0, range.to - pos);\n        result = this.chunk2.charCodeAt(0);\n      }\n    }\n\n    if (pos >= this.token.lookAhead) this.token.lookAhead = pos + 1;\n    return result;\n  } /// Accept a token. By default, the end of the token is set to the\n  /// current stream position, but you can pass an offset (relative to\n  /// the stream position) to change that.\n\n\n  acceptToken(token) {\n    let endOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n    if (end == null || end < this.token.start) throw new RangeError(\"Token end out of bounds\");\n    this.token.value = token;\n    this.token.end = end;\n  }\n\n  getChunk() {\n    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n      let {\n        chunk,\n        chunkPos\n      } = this;\n      this.chunk = this.chunk2;\n      this.chunkPos = this.chunk2Pos;\n      this.chunk2 = chunk;\n      this.chunk2Pos = chunkPos;\n      this.chunkOff = this.pos - this.chunkPos;\n    } else {\n      this.chunk2 = this.chunk;\n      this.chunk2Pos = this.chunkPos;\n      let nextChunk = this.input.chunk(this.pos);\n      let end = this.pos + nextChunk.length;\n      this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n      this.chunkPos = this.pos;\n      this.chunkOff = 0;\n    }\n  }\n\n  readNext() {\n    if (this.chunkOff >= this.chunk.length) {\n      this.getChunk();\n      if (this.chunkOff == this.chunk.length) return this.next = -1;\n    }\n\n    return this.next = this.chunk.charCodeAt(this.chunkOff);\n  } /// Move the stream forward N (defaults to 1) code units. Returns\n  /// the new value of [`next`](#lr.InputStream.next).\n\n\n  advance() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    this.chunkOff += n;\n\n    while (this.pos + n >= this.range.to) {\n      if (this.rangeIndex == this.ranges.length - 1) return this.setDone();\n      n -= this.range.to - this.pos;\n      this.range = this.ranges[++this.rangeIndex];\n      this.pos = this.range.from;\n    }\n\n    this.pos += n;\n    if (this.pos >= this.token.lookAhead) this.token.lookAhead = this.pos + 1;\n    return this.readNext();\n  }\n\n  setDone() {\n    this.pos = this.chunkPos = this.end;\n    this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n    this.chunk = \"\";\n    return this.next = -1;\n  } /// @internal\n\n\n  reset(pos, token) {\n    if (token) {\n      this.token = token;\n      token.start = pos;\n      token.lookAhead = pos + 1;\n      token.value = token.extended = -1;\n    } else {\n      this.token = nullToken;\n    }\n\n    if (this.pos != pos) {\n      this.pos = pos;\n\n      if (pos == this.end) {\n        this.setDone();\n        return this;\n      }\n\n      while (pos < this.range.from) this.range = this.ranges[--this.rangeIndex];\n\n      while (pos >= this.range.to) this.range = this.ranges[++this.rangeIndex];\n\n      if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n        this.chunkOff = pos - this.chunkPos;\n      } else {\n        this.chunk = \"\";\n        this.chunkOff = 0;\n      }\n\n      this.readNext();\n    }\n\n    return this;\n  } /// @internal\n\n\n  read(from, to) {\n    if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length) return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n    if (from >= this.range.from && to <= this.range.to) return this.input.read(from, to);\n    let result = \"\";\n\n    for (let r of this.ranges) {\n      if (r.from >= to) break;\n      if (r.to > from) result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n    }\n\n    return result;\n  }\n\n} /// @internal\n\n\nclass TokenGroup {\n  constructor(data, id) {\n    this.data = data;\n    this.id = id;\n  }\n\n  token(input, stack) {\n    readToken(this.data, input, stack, this.id);\n  }\n\n}\n\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false; /// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\n\nclass ExternalTokenizer {\n  /// Create a tokenizer. The first argument is the function that,\n  /// given an input stream, scans for the types of tokens it\n  /// recognizes at the stream's position, and calls\n  /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n  /// one.\n  constructor( /// @internal\n  token) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.token = token;\n    this.contextual = !!options.contextual;\n    this.fallback = !!options.fallback;\n    this.extend = !!options.extend;\n  }\n\n} // Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `token` when it matches a token.\n\n\nfunction readToken(data, input, stack, group) {\n  let state = 0,\n      groupMask = 1 << group,\n      {\n    parser\n  } = stack.p,\n      {\n    dialect\n  } = parser;\n\n  scan: for (;;) {\n    if ((groupMask & data[state]) == 0) break;\n    let accEnd = data[state + 1]; // Check whether this state can lead to a token in the current group\n    // Accept tokens in this state, possibly overwriting\n    // lower-precedence / shorter tokens\n\n    for (let i = state + 3; i < accEnd; i += 2) if ((data[i + 1] & groupMask) > 0) {\n      let term = data[i];\n\n      if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {\n        input.acceptToken(term);\n        break;\n      }\n    } // Do a binary search on the state's edges\n\n\n    for (let next = input.next, low = 0, high = data[state + 2]; low < high;) {\n      let mid = low + high >> 1;\n      let index = accEnd + mid + (mid << 1);\n      let from = data[index],\n          to = data[index + 1];\n      if (next < from) high = mid;else if (next >= to) low = mid + 1;else {\n        state = data[index + 2];\n        input.advance();\n        continue scan;\n      }\n    }\n\n    break;\n  }\n} // See lezer-generator/src/encode.ts for comments about the encoding\n// used here\n\n\nfunction decodeArray(input) {\n  let Type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Uint16Array;\n  if (typeof input != \"string\") return input;\n  let array = null;\n\n  for (let pos = 0, out = 0; pos < input.length;) {\n    let value = 0;\n\n    for (;;) {\n      let next = input.charCodeAt(pos++),\n          stop = false;\n\n      if (next == 126\n      /* BigValCode */\n      ) {\n        value = 65535\n        /* BigVal */\n        ;\n        break;\n      }\n\n      if (next >= 92\n      /* Gap2 */\n      ) next--;\n      if (next >= 34\n      /* Gap1 */\n      ) next--;\n      let digit = next - 32\n      /* Start */\n      ;\n\n      if (digit >= 46\n      /* Base */\n      ) {\n        digit -= 46\n        /* Base */\n        ;\n        stop = true;\n      }\n\n      value += digit;\n      if (stop) break;\n      value *= 46\n      /* Base */\n      ;\n    }\n\n    if (array) array[out++] = value;else array = new Type(value);\n  }\n\n  return array;\n} // FIXME find some way to reduce recovery work done when the input\n// doesn't match the grammar at all.\n// Environment variable used to control console output\n\n\nconst verbose = typeof process != \"undefined\" && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n\n(function (Safety) {\n  Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\n\nfunction cutAt(tree, pos, side) {\n  let cursor = tree.fullCursor();\n  cursor.moveTo(pos);\n\n  for (;;) {\n    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos))) for (;;) {\n      if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError) return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25\n      /* Margin */\n      )) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25\n      /* Margin */\n      ));\n      if (side < 0 ? cursor.prevSibling() : cursor.nextSibling()) break;\n      if (!cursor.parent()) return side < 0 ? 0 : tree.length;\n    }\n  }\n}\n\nclass FragmentCursor {\n  constructor(fragments, nodeSet) {\n    this.fragments = fragments;\n    this.nodeSet = nodeSet;\n    this.i = 0;\n    this.fragment = null;\n    this.safeFrom = -1;\n    this.safeTo = -1;\n    this.trees = [];\n    this.start = [];\n    this.index = [];\n    this.nextFragment();\n  }\n\n  nextFragment() {\n    let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n\n    if (fr) {\n      this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n      this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n\n      while (this.trees.length) {\n        this.trees.pop();\n        this.start.pop();\n        this.index.pop();\n      }\n\n      this.trees.push(fr.tree);\n      this.start.push(-fr.offset);\n      this.index.push(0);\n      this.nextStart = this.safeFrom;\n    } else {\n      this.nextStart = 1e9;\n    }\n  } // `pos` must be >= any previously given `pos` for this cursor\n\n\n  nodeAt(pos) {\n    if (pos < this.nextStart) return null;\n\n    while (this.fragment && this.safeTo <= pos) this.nextFragment();\n\n    if (!this.fragment) return null;\n\n    for (;;) {\n      let last = this.trees.length - 1;\n\n      if (last < 0) {\n        // End of tree\n        this.nextFragment();\n        return null;\n      }\n\n      let top = this.trees[last],\n          index = this.index[last];\n\n      if (index == top.children.length) {\n        this.trees.pop();\n        this.start.pop();\n        this.index.pop();\n        continue;\n      }\n\n      let next = top.children[index];\n      let start = this.start[last] + top.positions[index];\n\n      if (start > pos) {\n        this.nextStart = start;\n        return null;\n      }\n\n      if (next instanceof Tree) {\n        if (start == pos) {\n          if (start < this.safeFrom) return null;\n          let end = start + next.length;\n\n          if (end <= this.safeTo) {\n            let lookAhead = next.prop(NodeProp.lookAhead);\n            if (!lookAhead || end + lookAhead < this.fragment.to) return next;\n          }\n        }\n\n        this.index[last]++;\n\n        if (start + next.length >= Math.max(this.safeFrom, pos)) {\n          // Enter this node\n          this.trees.push(next);\n          this.start.push(start);\n          this.index.push(0);\n        }\n      } else {\n        this.index[last]++;\n        this.nextStart = start + next.length;\n      }\n    }\n  }\n\n}\n\nclass TokenCache {\n  constructor(parser, stream) {\n    this.stream = stream;\n    this.tokens = [];\n    this.mainToken = null;\n    this.actions = [];\n    this.tokens = parser.tokenizers.map(_ => new CachedToken());\n  }\n\n  getActions(stack) {\n    let actionIndex = 0;\n    let main = null;\n    let {\n      parser\n    } = stack.p,\n        {\n      tokenizers\n    } = parser;\n    let mask = parser.stateSlot(stack.state, 3\n    /* TokenizerMask */\n    );\n    let context = stack.curContext ? stack.curContext.hash : 0;\n    let lookAhead = 0;\n\n    for (let i = 0; i < tokenizers.length; i++) {\n      if ((1 << i & mask) == 0) continue;\n      let tokenizer = tokenizers[i],\n          token = this.tokens[i];\n      if (main && !tokenizer.fallback) continue;\n\n      if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n        this.updateCachedToken(token, tokenizer, stack);\n        token.mask = mask;\n        token.context = context;\n      }\n\n      if (token.lookAhead > token.end + 25\n      /* Margin */\n      ) lookAhead = Math.max(token.lookAhead, lookAhead);\n\n      if (token.value != 0\n      /* Err */\n      ) {\n        let startIndex = actionIndex;\n        if (token.extended > -1) actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n        actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n\n        if (!tokenizer.extend) {\n          main = token;\n          if (actionIndex > startIndex) break;\n        }\n      }\n    }\n\n    while (this.actions.length > actionIndex) this.actions.pop();\n\n    if (lookAhead) stack.setLookAhead(lookAhead);\n\n    if (!main && stack.pos == this.stream.end) {\n      main = new CachedToken();\n      main.value = stack.p.parser.eofTerm;\n      main.start = main.end = stack.pos;\n      actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n    }\n\n    this.mainToken = main;\n    return this.actions;\n  }\n\n  getMainToken(stack) {\n    if (this.mainToken) return this.mainToken;\n    let main = new CachedToken(),\n        {\n      pos,\n      p\n    } = stack;\n    main.start = pos;\n    main.end = Math.min(pos + 1, p.stream.end);\n    main.value = pos == p.stream.end ? p.parser.eofTerm : 0\n    /* Err */\n    ;\n    return main;\n  }\n\n  updateCachedToken(token, tokenizer, stack) {\n    tokenizer.token(this.stream.reset(stack.pos, token), stack);\n\n    if (token.value > -1) {\n      let {\n        parser\n      } = stack.p;\n\n      for (let i = 0; i < parser.specialized.length; i++) if (parser.specialized[i] == token.value) {\n        let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n\n        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n          if ((result & 1) == 0\n          /* Specialize */\n          ) token.value = result >> 1;else token.extended = result >> 1;\n          break;\n        }\n      }\n    } else {\n      token.value = 0\n      /* Err */\n      ;\n      token.end = Math.min(stack.p.stream.end, stack.pos + 1);\n    }\n  }\n\n  putAction(action, token, end, index) {\n    // Don't add duplicate actions\n    for (let i = 0; i < index; i += 3) if (this.actions[i] == action) return index;\n\n    this.actions[index++] = action;\n    this.actions[index++] = token;\n    this.actions[index++] = end;\n    return index;\n  }\n\n  addActions(stack, token, end, index) {\n    let {\n      state\n    } = stack,\n        {\n      parser\n    } = stack.p,\n        {\n      data\n    } = parser;\n\n    for (let set = 0; set < 2; set++) {\n      for (let i = parser.stateSlot(state, set ? 2\n      /* Skip */\n      : 1\n      /* Actions */\n      );; i += 3) {\n        if (data[i] == 65535\n        /* End */\n        ) {\n          if (data[i + 1] == 1\n          /* Next */\n          ) {\n            i = pair(data, i + 2);\n          } else {\n            if (index == 0 && data[i + 1] == 2\n            /* Other */\n            ) index = this.putAction(pair(data, i + 2), token, end, index);\n            break;\n          }\n        }\n\n        if (data[i] == token) index = this.putAction(pair(data, i + 1), token, end, index);\n      }\n    }\n\n    return index;\n  }\n\n}\n\nvar Rec;\n\n(function (Rec) {\n  Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n  Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\"; // When two stacks have been running independently long enough to\n  // add this many elements to their buffers, prune one.\n\n  Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n  Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\"; // Once a stack reaches this depth (in .stack.length) force-reduce\n  // it back to CutTo to avoid creating trees that overflow the stack\n  // on recursive traversal.\n\n  Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n  Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n})(Rec || (Rec = {}));\n\nclass Parse {\n  constructor(parser, input, fragments, ranges) {\n    this.parser = parser;\n    this.input = input;\n    this.ranges = ranges;\n    this.recovering = 0;\n    this.nextStackID = 0x2654; // â™”, â™•, â™–, â™—, â™˜, â™™, â™ , â™¡, â™¢, â™£, â™¤, â™¥, â™¦, â™§\n\n    this.minStackPos = 0;\n    this.reused = [];\n    this.stoppedAt = null;\n    this.stream = new InputStream(input, ranges);\n    this.tokens = new TokenCache(parser, this.stream);\n    this.topTerm = parser.top[1];\n    let {\n      from\n    } = ranges[0];\n    this.stacks = [Stack.start(this, parser.top[0], from)];\n    this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4 ? new FragmentCursor(fragments, parser.nodeSet) : null;\n  }\n\n  get parsedPos() {\n    return this.minStackPos;\n  } // Move the parser forward. This will process all parse stacks at\n  // `this.pos` and try to advance them to a further position. If no\n  // stack for such a position is found, it'll start error-recovery.\n  //\n  // When the parse is finished, this will return a syntax tree. When\n  // not, it returns `null`.\n\n\n  advance() {\n    let stacks = this.stacks,\n        pos = this.minStackPos; // This will hold stacks beyond `pos`.\n\n    let newStacks = this.stacks = [];\n    let stopped, stoppedTokens; // Keep advancing any stacks at `pos` until they either move\n    // forward or can't be advanced. Gather stacks that can't be\n    // advanced further in `stopped`.\n\n    for (let i = 0; i < stacks.length; i++) {\n      let stack = stacks[i];\n\n      for (;;) {\n        this.tokens.mainToken = null;\n\n        if (stack.pos > pos) {\n          newStacks.push(stack);\n        } else if (this.advanceStack(stack, newStacks, stacks)) {\n          continue;\n        } else {\n          if (!stopped) {\n            stopped = [];\n            stoppedTokens = [];\n          }\n\n          stopped.push(stack);\n          let tok = this.tokens.getMainToken(stack);\n          stoppedTokens.push(tok.value, tok.end);\n        }\n\n        break;\n      }\n    }\n\n    if (!newStacks.length) {\n      let finished = stopped && findFinished(stopped);\n      if (finished) return this.stackToTree(finished);\n\n      if (this.parser.strict) {\n        if (verbose && stopped) console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n        throw new SyntaxError(\"No parse at \" + pos);\n      }\n\n      if (!this.recovering) this.recovering = 5\n      /* Distance */\n      ;\n    }\n\n    if (this.recovering && stopped) {\n      let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);\n      if (finished) return this.stackToTree(finished.forceAll());\n    }\n\n    if (this.recovering) {\n      let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3\n      /* MaxRemainingPerStep */\n      ;\n\n      if (newStacks.length > maxRemaining) {\n        newStacks.sort((a, b) => b.score - a.score);\n\n        while (newStacks.length > maxRemaining) newStacks.pop();\n      }\n\n      if (newStacks.some(s => s.reducePos > pos)) this.recovering--;\n    } else if (newStacks.length > 1) {\n      // Prune stacks that are in the same state, or that have been\n      // running without splitting for a while, to avoid getting stuck\n      // with multiple successful stacks running endlessly on.\n      outer: for (let i = 0; i < newStacks.length - 1; i++) {\n        let stack = newStacks[i];\n\n        for (let j = i + 1; j < newStacks.length; j++) {\n          let other = newStacks[j];\n\n          if (stack.sameState(other) || stack.buffer.length > 500\n          /* MinBufferLengthPrune */\n          && other.buffer.length > 500\n          /* MinBufferLengthPrune */\n          ) {\n            if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {\n              newStacks.splice(j--, 1);\n            } else {\n              newStacks.splice(i--, 1);\n              continue outer;\n            }\n          }\n        }\n      }\n    }\n\n    this.minStackPos = newStacks[0].pos;\n\n    for (let i = 1; i < newStacks.length; i++) if (newStacks[i].pos < this.minStackPos) this.minStackPos = newStacks[i].pos;\n\n    return null;\n  }\n\n  stopAt(pos) {\n    if (this.stoppedAt != null && this.stoppedAt < pos) throw new RangeError(\"Can't move stoppedAt forward\");\n    this.stoppedAt = pos;\n  } // Returns an updated version of the given stack, or null if the\n  // stack can't advance normally. When `split` and `stacks` are\n  // given, stacks split off by ambiguous operations will be pushed to\n  // `split`, or added to `stacks` if they move `pos` forward.\n\n\n  advanceStack(stack, stacks, split) {\n    let start = stack.pos,\n        {\n      parser\n    } = this;\n    let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n    if (this.stoppedAt != null && start > this.stoppedAt) return stack.forceReduce() ? stack : null;\n\n    if (this.fragments) {\n      let strictCx = stack.curContext && stack.curContext.tracker.strict,\n          cxHash = strictCx ? stack.curContext.hash : 0;\n\n      for (let cached = this.fragments.nodeAt(start); cached;) {\n        let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n\n        if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n          stack.useNode(cached, match);\n          if (verbose) console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n          return true;\n        }\n\n        if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0) break;\n        let inner = cached.children[0];\n        if (inner instanceof Tree && cached.positions[0] == 0) cached = inner;else break;\n      }\n    }\n\n    let defaultReduce = parser.stateSlot(stack.state, 4\n    /* DefaultReduce */\n    );\n\n    if (defaultReduce > 0) {\n      stack.reduce(defaultReduce);\n      if (verbose) console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535\n      /* ValueMask */\n      )})`);\n      return true;\n    }\n\n    if (stack.stack.length >= 15000\n    /* CutDepth */\n    ) {\n      while (stack.stack.length > 9000\n      /* CutTo */\n      && stack.forceReduce()) {}\n    }\n\n    let actions = this.tokens.getActions(stack);\n\n    for (let i = 0; i < actions.length;) {\n      let action = actions[i++],\n          term = actions[i++],\n          end = actions[i++];\n      let last = i == actions.length || !split;\n      let localStack = last ? stack : stack.split();\n      localStack.apply(action, term, end);\n      if (verbose) console.log(base + this.stackID(localStack) + ` (via ${(action & 65536\n      /* ReduceFlag */\n      ) == 0 ? \"shift\" : `reduce of ${parser.getName(action & 65535\n      /* ValueMask */\n      )}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n      if (last) return true;else if (localStack.pos > start) stacks.push(localStack);else split.push(localStack);\n    }\n\n    return false;\n  } // Advance a given stack forward as far as it will go. Returns the\n  // (possibly updated) stack if it got stuck, or null if it moved\n  // forward and was given to `pushStackDedup`.\n\n\n  advanceFully(stack, newStacks) {\n    let pos = stack.pos;\n\n    for (;;) {\n      if (!this.advanceStack(stack, null, null)) return false;\n\n      if (stack.pos > pos) {\n        pushStackDedup(stack, newStacks);\n        return true;\n      }\n    }\n  }\n\n  runRecovery(stacks, tokens, newStacks) {\n    let finished = null,\n        restarted = false;\n\n    for (let i = 0; i < stacks.length; i++) {\n      let stack = stacks[i],\n          token = tokens[i << 1],\n          tokenEnd = tokens[(i << 1) + 1];\n      let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n\n      if (stack.deadEnd) {\n        if (restarted) continue;\n        restarted = true;\n        stack.restart();\n        if (verbose) console.log(base + this.stackID(stack) + \" (restarted)\");\n        let done = this.advanceFully(stack, newStacks);\n        if (done) continue;\n      }\n\n      let force = stack.split(),\n          forceBase = base;\n\n      for (let j = 0; force.forceReduce() && j < 10\n      /* ForceReduceLimit */\n      ; j++) {\n        if (verbose) console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n        let done = this.advanceFully(force, newStacks);\n        if (done) break;\n        if (verbose) forceBase = this.stackID(force) + \" -> \";\n      }\n\n      for (let insert of stack.recoverByInsert(token)) {\n        if (verbose) console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n        this.advanceFully(insert, newStacks);\n      }\n\n      if (this.stream.end > stack.pos) {\n        if (tokenEnd == stack.pos) {\n          tokenEnd++;\n          token = 0\n          /* Err */\n          ;\n        }\n\n        stack.recoverByDelete(token, tokenEnd);\n        if (verbose) console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n        pushStackDedup(stack, newStacks);\n      } else if (!finished || finished.score < stack.score) {\n        finished = stack;\n      }\n    }\n\n    return finished;\n  } // Convert the stack's buffer to a syntax tree.\n\n\n  stackToTree(stack) {\n    stack.close();\n    return Tree.build({\n      buffer: StackBufferCursor.create(stack),\n      nodeSet: this.parser.nodeSet,\n      topID: this.topTerm,\n      maxBufferLength: this.parser.bufferLength,\n      reused: this.reused,\n      start: this.ranges[0].from,\n      length: stack.pos - this.ranges[0].from,\n      minRepeatType: this.parser.minRepeatTerm\n    });\n  }\n\n  stackID(stack) {\n    let id = (stackIDs || (stackIDs = new WeakMap())).get(stack);\n    if (!id) stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n    return id + stack;\n  }\n\n}\n\nfunction pushStackDedup(stack, newStacks) {\n  for (let i = 0; i < newStacks.length; i++) {\n    let other = newStacks[i];\n\n    if (other.pos == stack.pos && other.sameState(stack)) {\n      if (newStacks[i].score < stack.score) newStacks[i] = stack;\n      return;\n    }\n  }\n\n  newStacks.push(stack);\n}\n\nclass Dialect {\n  constructor(source, flags, disabled) {\n    this.source = source;\n    this.flags = flags;\n    this.disabled = disabled;\n  }\n\n  allows(term) {\n    return !this.disabled || this.disabled[term] == 0;\n  }\n\n}\n\nconst id = x => x; /// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\n\n\nclass ContextTracker {\n  /// Define a context tracker.\n  constructor(spec) {\n    this.start = spec.start;\n    this.shift = spec.shift || id;\n    this.reduce = spec.reduce || id;\n    this.reuse = spec.reuse || id;\n\n    this.hash = spec.hash || (() => 0);\n\n    this.strict = spec.strict !== false;\n  }\n\n} /// A parser holds the parse tables for a given grammar, as generated\n/// by `lezer-generator`.\n\n\nclass LRParser extends Parser {\n  /// @internal\n  constructor(spec) {\n    super(); /// @internal\n\n    this.wrappers = [];\n    if (spec.version != 13\n    /* Version */\n    ) throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${13\n    /* Version */\n    })`);\n    let nodeNames = spec.nodeNames.split(\" \");\n    this.minRepeatTerm = nodeNames.length;\n\n    for (let i = 0; i < spec.repeatNodeCount; i++) nodeNames.push(\"\");\n\n    let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n    let nodeProps = [];\n\n    for (let i = 0; i < nodeNames.length; i++) nodeProps.push([]);\n\n    function setProp(nodeID, prop, value) {\n      nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n    }\n\n    if (spec.nodeProps) for (let propSpec of spec.nodeProps) {\n      let prop = propSpec[0];\n\n      for (let i = 1; i < propSpec.length;) {\n        let next = propSpec[i++];\n\n        if (next >= 0) {\n          setProp(next, prop, propSpec[i++]);\n        } else {\n          let value = propSpec[i + -next];\n\n          for (let j = -next; j > 0; j--) setProp(propSpec[i++], prop, value);\n\n          i++;\n        }\n      }\n    }\n    this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n      name: i >= this.minRepeatTerm ? undefined : name,\n      id: i,\n      props: nodeProps[i],\n      top: topTerms.indexOf(i) > -1,\n      error: i == 0,\n      skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n    })));\n    this.strict = false;\n    this.bufferLength = DefaultBufferLength;\n    let tokenArray = decodeArray(spec.tokenData);\n    this.context = spec.context;\n    this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);\n    this.specializers = [];\n    if (spec.specialized) for (let i = 0; i < spec.specialized.length; i++) {\n      this.specialized[i] = spec.specialized[i].term;\n      this.specializers[i] = spec.specialized[i].get;\n    }\n    this.states = decodeArray(spec.states, Uint32Array);\n    this.data = decodeArray(spec.stateData);\n    this.goto = decodeArray(spec.goto);\n    this.maxTerm = spec.maxTerm;\n    this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n    this.topRules = spec.topRules;\n    this.dialects = spec.dialects || {};\n    this.dynamicPrecedences = spec.dynamicPrecedences || null;\n    this.tokenPrecTable = spec.tokenPrec;\n    this.termNames = spec.termNames || null;\n    this.maxNode = this.nodeSet.types.length - 1;\n    this.dialect = this.parseDialect();\n    this.top = this.topRules[Object.keys(this.topRules)[0]];\n  }\n\n  createParse(input, fragments, ranges) {\n    let parse = new Parse(this, input, fragments, ranges);\n\n    for (let w of this.wrappers) parse = w(parse, input, fragments, ranges);\n\n    return parse;\n  } /// Get a goto table entry @internal\n\n\n  getGoto(state, term) {\n    let loose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let table = this.goto;\n    if (term >= table[0]) return -1;\n\n    for (let pos = table[term + 1];;) {\n      let groupTag = table[pos++],\n          last = groupTag & 1;\n      let target = table[pos++];\n      if (last && loose) return target;\n\n      for (let end = pos + (groupTag >> 1); pos < end; pos++) if (table[pos] == state) return target;\n\n      if (last) return -1;\n    }\n  } /// Check if this state has an action for a given terminal @internal\n\n\n  hasAction(state, terminal) {\n    let data = this.data;\n\n    for (let set = 0; set < 2; set++) {\n      for (let i = this.stateSlot(state, set ? 2\n      /* Skip */\n      : 1\n      /* Actions */\n      ), next;; i += 3) {\n        if ((next = data[i]) == 65535\n        /* End */\n        ) {\n          if (data[i + 1] == 1\n          /* Next */\n          ) next = data[i = pair(data, i + 2)];else if (data[i + 1] == 2\n          /* Other */\n          ) return pair(data, i + 2);else break;\n        }\n\n        if (next == terminal || next == 0\n        /* Err */\n        ) return pair(data, i + 1);\n      }\n    }\n\n    return 0;\n  } /// @internal\n\n\n  stateSlot(state, slot) {\n    return this.states[state * 6\n    /* Size */\n    + slot];\n  } /// @internal\n\n\n  stateFlag(state, flag) {\n    return (this.stateSlot(state, 0\n    /* Flags */\n    ) & flag) > 0;\n  } /// @internal\n\n\n  validAction(state, action) {\n    if (action == this.stateSlot(state, 4\n    /* DefaultReduce */\n    )) return true;\n\n    for (let i = this.stateSlot(state, 1\n    /* Actions */\n    );; i += 3) {\n      if (this.data[i] == 65535\n      /* End */\n      ) {\n        if (this.data[i + 1] == 1\n        /* Next */\n        ) i = pair(this.data, i + 2);else return false;\n      }\n\n      if (action == pair(this.data, i + 1)) return true;\n    }\n  } /// Get the states that can follow this one through shift actions or\n  /// goto jumps. @internal\n\n\n  nextStates(state) {\n    let result = [];\n\n    for (let i = this.stateSlot(state, 1\n    /* Actions */\n    );; i += 3) {\n      if (this.data[i] == 65535\n      /* End */\n      ) {\n        if (this.data[i + 1] == 1\n        /* Next */\n        ) i = pair(this.data, i + 2);else break;\n      }\n\n      if ((this.data[i + 2] & 65536\n      /* ReduceFlag */\n      >> 16) == 0) {\n        let value = this.data[i + 1];\n        if (!result.some((v, i) => i & 1 && v == value)) result.push(this.data[i], value);\n      }\n    }\n\n    return result;\n  } /// @internal\n\n\n  overrides(token, prev) {\n    let iPrev = findOffset(this.data, this.tokenPrecTable, prev);\n    return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\n  } /// Configure the parser. Returns a new parser instance that has the\n  /// given settings modified. Settings not provided in `config` are\n  /// kept from the original parser.\n\n\n  configure(config) {\n    // Hideous reflection-based kludge to make it easy to create a\n    // slightly modified copy of a parser.\n    let copy = Object.assign(Object.create(LRParser.prototype), this);\n    if (config.props) copy.nodeSet = this.nodeSet.extend(...config.props);\n\n    if (config.top) {\n      let info = this.topRules[config.top];\n      if (!info) throw new RangeError(`Invalid top rule name ${config.top}`);\n      copy.top = info;\n    }\n\n    if (config.tokenizers) copy.tokenizers = this.tokenizers.map(t => {\n      let found = config.tokenizers.find(r => r.from == t);\n      return found ? found.to : t;\n    });\n    if (config.contextTracker) copy.context = config.contextTracker;\n    if (config.dialect) copy.dialect = this.parseDialect(config.dialect);\n    if (config.strict != null) copy.strict = config.strict;\n    if (config.wrap) copy.wrappers = copy.wrappers.concat(config.wrap);\n    if (config.bufferLength != null) copy.bufferLength = config.bufferLength;\n    return copy;\n  } /// Returns the name associated with a given term. This will only\n  /// work for all terms when the parser was generated with the\n  /// `--names` option. By default, only the names of tagged terms are\n  /// stored.\n\n\n  getName(term) {\n    return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n  } /// The eof term id is always allocated directly after the node\n  /// types. @internal\n\n\n  get eofTerm() {\n    return this.maxNode + 1;\n  } /// The type of top node produced by the parser.\n\n\n  get topNode() {\n    return this.nodeSet.types[this.top[1]];\n  } /// @internal\n\n\n  dynamicPrecedence(term) {\n    let prec = this.dynamicPrecedences;\n    return prec == null ? 0 : prec[term] || 0;\n  } /// @internal\n\n\n  parseDialect(dialect) {\n    let values = Object.keys(this.dialects),\n        flags = values.map(() => false);\n    if (dialect) for (let part of dialect.split(\" \")) {\n      let id = values.indexOf(part);\n      if (id >= 0) flags[id] = true;\n    }\n    let disabled = null;\n\n    for (let i = 0; i < values.length; i++) if (!flags[i]) {\n      for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535\n      /* End */\n      ;) (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n    }\n\n    return new Dialect(dialect, flags, disabled);\n  } /// (used by the output of the parser generator) @internal\n\n\n  static deserialize(spec) {\n    return new LRParser(spec);\n  }\n\n}\n\nfunction pair(data, off) {\n  return data[off] | data[off + 1] << 16;\n}\n\nfunction findOffset(data, start, term) {\n  for (let i = start, next; (next = data[i]) != 65535\n  /* End */\n  ; i++) if (next == term) return i - start;\n\n  return -1;\n}\n\nfunction findFinished(stacks) {\n  let best = null;\n\n  for (let stack of stacks) {\n    let stopped = stack.p.stoppedAt;\n    if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(stack.state, 2\n    /* Accepting */\n    ) && (!best || best.score < stack.score)) best = stack;\n  }\n\n  return best;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, Stack };","map":null,"metadata":{},"sourceType":"module"}