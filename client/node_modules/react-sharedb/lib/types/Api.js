'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Base2 = require('./Base');

var _Base3 = _interopRequireDefault(_Base2);

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Local = function (_Base) {
  (0, _inherits3.default)(Local, _Base);

  function Local() {
    var _ref;

    (0, _classCallCheck3.default)(this, Local);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = Local.__proto__ || (0, _getPrototypeOf2.default)(Local)).call.apply(_ref, [this].concat(args)));

    var _this$params = (0, _slicedToArray3.default)(_this.params, 4),
        path = _this$params[0],
        fn = _this$params[1],
        inputs = _this$params[2],
        options = _this$params[3];

    _this.fn = fn;
    _this.path = path;
    if (!_this.path) {
      var cacheKey = '_' + hashCode(_this.fn.toString() + (0, _stringify2.default)(_this.inputs));
      _this.path = '_session._cache.' + cacheKey;
    }
    _this.inputs = inputs || [];
    _this.options = options || {};
    _this.listeners = [];
    return _this;
  }

  (0, _createClass3.default)(Local, [{
    key: 'init',
    value: function init(firstItem) {
      var _this2 = this;

      if (this.options.debounce && !firstItem) {
        return new _promise2.default(function (resolve) {
          setTimeout(resolve, _this2.options.debounce);
        }).then(function () {
          if (_this2.cancelled) return;
          return _this2._fetch();
        });
      }
      return this._fetch(firstItem);
    }
  }, {
    key: 'refModel',
    value: function refModel() {
      if (this.cancelled) return;
      var key = this.key;

      if (this.path) {
        this.model.root.setDiff(this.path, this.data);
        (0, _util.observablePath)(this.path);
        this.model.ref(key, this.model.root.scope(this.path));
      } else {
        this.model.setDiff(key, this.data);
      }
    }
  }, {
    key: 'unrefModel',
    value: function unrefModel() {
      var key = this.key;

      if (this.path) {
        this.model.removeRef(key);
        this.model.root.del(this.path);
      } else {
        this.model.del(key);
      }
    }
  }, {
    key: '_fetch',
    value: function _fetch(firstItem) {
      var _this3 = this;

      var promise = this.fn.apply(this, (0, _toConsumableArray3.default)(this.inputs));
      if (!(promise && typeof promise.then === 'function')) {
        throw new Error('[react-sharedb] Api: fn must return promise');
      }
      if (this.model.get(this.path)) {
        this.data = this.model.get(this.path);
        return;
      }

      if (firstItem) {
        var model = this.model;
        var path = this.path;
        throw promise.then(function (data) {
          model.set(path, data);
        });
      } else {
        return promise.then(function (data) {
          if (_this3.cancelled) return;
          _this3.data = data;
          _this3.model.set(_this3.path, data);
        });
      }
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      // this.unrefModel() // TODO: Maybe enable unref in future
      delete this.path;
      delete this.fn;
      delete this.inputs;
      delete this.options;
      delete this.data;
      (0, _get3.default)(Local.prototype.__proto__ || (0, _getPrototypeOf2.default)(Local.prototype), 'destroy', this).call(this);
    }
  }]);
  return Local;
}(_Base3.default);

exports.default = Local;


function hashCode(source) {
  var hash = 0;
  if (source.length == 0) return hash;
  for (var i = 0; i < source.length; i++) {
    var char = source.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash; // Convert to 32bit integer
  }
  return hash;
}
module.exports = exports['default'];