'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subLocal = subLocal;
exports.subDoc = subDoc;
exports.subQuery = subQuery;
exports.subValue = subValue;
exports.subApi = subApi;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _isExtraQuery = require('./isExtraQuery');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function subLocal(localPath) {
  if (typeof localPath !== 'string') {
    throw new Error('[react-sharedb] subLocal(): localPath must be a String. Got: ' + localPath);
  }
  return {
    __subscriptionType: 'Local',
    params: localPath
  };
}

function subDoc(collection, docId) {
  var invalid = void 0;
  if (typeof collection !== 'string') {
    throw new Error('[react-sharedb] subDoc(): `collection` must be a String. Got: ' + collection);
  }
  if (docId == null) {
    console.warn('\n      [react-sharedb] subDoc(): You are trying to subscribe to an undefined document id:\n        ' + collection + '.' + docId + '\n      Falling back to \'__NULL__\' document to prevent critical crash.\n      You should prevent situations when the `docId` is undefined.\n    ');
    invalid = true;
  }
  if (invalid) docId = '__NULL__';
  return {
    __subscriptionType: 'Doc',
    __subscriptionInvalid: invalid,
    params: [collection, docId]
  };
}

function subQuery(collection, query) {
  var invalid = void 0;
  if (typeof collection !== 'string') {
    throw new Error('[react-sharedb] subQuery(): Collection must be String. Got: ' + collection);
  }
  if (query == null) {
    console.warn('\n      [react-sharedb] subQuery(): Query is undefined. Got:\n        ' + collection + ', ' + query + '\n      Falling back to {_id: \'__NON_EXISTENT__\'} query to prevent critical crash.\n      You should prevent situations when the `query` is undefined.\n    ');
    invalid = true;
  }
  if (_lodash2.default.isString(query) || _lodash2.default.isArray(query) || _lodash2.default.isBoolean(query) || _lodash2.default.isNumber(query)) {
    throw new Error('\n      [react-sharedb] subQuery(): Query is not an Object. Got:\n        ' + collection + ', ' + query + '\n      Query must always be an Object.\n    ');
  }
  if (invalid) query = { _id: '__NON_EXISTENT__' };
  return {
    __subscriptionType: (0, _isExtraQuery.isExtraQuery)(query) ? 'QueryExtra' : 'Query',
    __subscriptionInvalid: invalid,
    params: [collection, query]
  };
}

function subValue(value) {
  return {
    __subscriptionType: 'Value',
    params: value
  };
}

function subApi(path, fn, inputs, options) {
  if (typeof path === 'function') {
    options = inputs;
    inputs = fn;
    fn = path;
    path = undefined;
  }
  if (typeof fn !== 'function') {
    throw new Error('[react-sharedb] subApi(): api Function (which must return promise) was not provided. Got: ' + fn);
  }
  if (path != null && (typeof path !== 'string' || path === '')) {
    throw new Error('[react-sharedb] subApi(): path must be a non-empty string. Got: ' + path);
  }
  if (inputs != null && !_lodash2.default.isArray(inputs)) {
    if (_lodash2.default.isString(inputs) || _lodash2.default.isBoolean(inputs) || _lodash2.default.isNumber(inputs)) {
      throw new Error('[react-sharedb] subApi(): inputs must be an array and ' + ('options must be an object. Got: inputs - ' + inputs + '; options - ' + options));
    }
    options = inputs;
    inputs = undefined;
  }
  if (options != null && (_lodash2.default.isArray(options) || _lodash2.default.isString(options) || _lodash2.default.isBoolean(options))) {
    throw new Error('[react-sharedb] subApi(): options must be an object. Got: ' + options);
  }
  if (options && options.debounce) {
    if (!_lodash2.default.isNumber(options.debounce)) {
      throw new Error('[react-sharedb] subApi(): debounce must be a number (milliseconds). Got: ' + options.debounce);
    }
  }
  return {
    __subscriptionType: 'Api',
    params: [path, fn, inputs, options]
  };
}