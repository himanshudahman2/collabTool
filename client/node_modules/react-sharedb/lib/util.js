'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

exports.observablePath = observablePath;
exports.initLocalCollection = initLocalCollection;
exports.clone = clone;

var _model = require('@react-sharedb/model');

var _model2 = _interopRequireDefault(_model);

var _observerUtil = require('@nx-js/observer-util');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _semaphore = require('./semaphore');

var _semaphore2 = _interopRequireDefault(_semaphore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function observablePath(path) {
  var segments = _model2.default._splitPath(path);
  var originalSegments = _model2.default._dereference(segments, true);
  var parentSegments = originalSegments.slice(0, -1);
  var leafSegment = originalSegments[originalSegments.length - 1];
  var result = _lodash2.default.get(_model2.default.data, originalSegments);
  if ((typeof result === 'undefined' ? 'undefined' : (0, _typeof3.default)(result)) === 'object' && result !== null && !(0, _observerUtil.isObservable)(result)) {
    _lodash2.default.get(_model2.default.data, parentSegments)[leafSegment] = (0, _observerUtil.observable)(result);
  }
}

function initLocalCollection(collection) {
  _semaphore2.default.ignoreCollectionObservableWarning = true;
  _semaphore2.default.allowComponentSetter = true;
  _model2.default.set(collection + '.__FOO', 'hello');
  _semaphore2.default.allowComponentSetter = false;
  _semaphore2.default.ignoreCollectionObservableWarning = false;
  _model2.default.data[collection] = (0, _observerUtil.observable)(_model2.default.data[collection]);
}

function clone(data) {
  var stringified = (0, _stringify2.default)(data);
  if (!stringified) return undefined;
  return JSON.parse(stringified);
}