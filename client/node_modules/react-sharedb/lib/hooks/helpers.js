'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentMetaContext = exports.emit = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

exports.useModel = useModel;
exports.useOn = useOn;
exports.useEmit = useEmit;
exports.useQueryIds = useQueryIds;
exports.useQueryDoc = useQueryDoc;
exports.useLocalDoc = useLocalDoc;
exports.useSession = useSession;
exports.usePage = usePage;
exports.useNow = useNow;
exports.useComponentId = useComponentId;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _model = require('@react-sharedb/model');

var _model2 = _interopRequireDefault(_model);

var _types = require('./types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var emit = exports.emit = _model2.default.emit.bind(_model2.default);

function useModel() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return (0, _react.useMemo)(function () {
    return _model2.default.scope.apply(_model2.default, args);
  }, [].concat(args));
}

function useOn() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  (0, _react.useLayoutEffect)(function () {
    var eventName = args[0];

    var listener = _model2.default.on.apply(_model2.default, args);
    return function () {
      _model2.default.removeListener(eventName, listener);
    };
  });
}

function useEmit() {
  return emit;
}

function useQueryIds(collection) {
  var ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var _useQuery = (0, _types.useQuery)(collection, { _id: { $in: ids } }),
      _useQuery2 = (0, _slicedToArray3.default)(_useQuery, 3),
      $items = _useQuery2[1],
      ready = _useQuery2[2];

  if (!ready) return [undefined, $items, ready];
  if (options.reverse) ids = ids.slice().reverse();
  var items = ids.map(function (id) {
    return _model2.default.get(collection + '.' + id);
  }).filter(Boolean);
  return [items, $items, ready];
}

function useQueryDoc(collection, query) {
  query = (0, _extends3.default)({}, query, {
    $limit: 1
  });
  if (!query.$sort) query.$sort = { createdAt: -1 };

  var _useQuery3 = (0, _types.useQuery)(collection, query),
      _useQuery4 = (0, _slicedToArray3.default)(_useQuery3, 3),
      _useQuery4$ = _useQuery4[0],
      items = _useQuery4$ === undefined ? [] : _useQuery4$,
      ready = _useQuery4[2];

  var itemId = items[0] && items[0].id;
  var $item = (0, _react.useMemo)(function () {
    if (!itemId) return;
    return _model2.default.at(collection + '.' + itemId);
  }, [itemId]);
  if (!ready || !itemId) return [undefined, undefined, ready];
  return [_model2.default.get(collection + '.' + itemId), $item, ready];
}

function useLocalDoc(collection, docId) {
  if (typeof collection !== 'string') {
    throw new Error('[react-sharedb] useLocalDoc(): `collection` must be a String. Got: ' + collection);
  }
  if (!docId) {
    console.warn('\n      [react-sharedb] useLocalDoc(): You are trying to subscribe to an undefined document id:\n        ' + collection + '.' + docId + '\n      Falling back to \'__NULL__\' document to prevent critical crash.\n      You should prevent situations when the `docId` is undefined.\n    ');
    docId = '__NULL__';
  }
  return (0, _types.useLocal)(collection + '.' + docId);
}

function useSession(path) {
  if (typeof path !== 'string') {
    throw new Error('[react-sharedb] useSession(): `path` must be a String. Got: ' + path);
  }
  return (0, _types.useLocal)('_session' + '.' + path);
}

function usePage(path) {
  if (typeof path !== 'string') {
    throw new Error('[react-sharedb] usePage(): `path` must be a String. Got: ' + path);
  }
  return (0, _types.useLocal)('_page' + '.' + path);
}

var ComponentMetaContext = exports.ComponentMetaContext = _react2.default.createContext({});

function useNow() {
  var _useContext = (0, _react.useContext)(ComponentMetaContext),
      createdAt = _useContext.createdAt;

  return createdAt;
}

function useComponentId() {
  var _useContext2 = (0, _react.useContext)(ComponentMetaContext),
      componentId = _useContext2.componentId;

  return componentId;
}