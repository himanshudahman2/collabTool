'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getModel;

var _racer = require('racer');

var _racer2 = _interopRequireDefault(_racer);

var _socket = require('racer-highway/lib/browser/socket');

var _socket2 = _interopRequireDefault(_socket);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isServer = typeof window === 'undefined';
var DEFAULT_CLIENT_OPTIONS = {
  base: '/channel',
  reconnect: true,
  browserChannelOnly: false,
  srvProtocol: undefined,
  srvHost: undefined,
  srvPort: undefined,
  srvSecurePort: undefined,
  timeout: 10000,
  timeoutIncrement: 10000
};
var DEFAULT_UNLOAD_DELAY = 3000; // short delay, like 100, might be better

_racer2.default.Model.prototype._createSocket = function () {
  var clientOptions = typeof window !== 'undefined' && window.__racerHighwayClientOptions || DEFAULT_CLIENT_OPTIONS;
  return new _socket2.default(clientOptions);
};

function getModel() {
  if (isServer) return;

  var model = _racer2.default.createModel();

  // Try to establish connection
  try {
    model.createConnection();
  } catch (err) {
    console.error('Error establishing connection with server', err);
  }

  // Try to unbundle server-side model
  var bundleElement = typeof document !== 'undefined' && document.getElementById && document.getElementById('bundle');
  var serializedModel = bundleElement && bundleElement.innerHTML;
  if (serializedModel) {
    try {
      model.unbundle(JSON.parse(serializedModel));
    } catch (err) {
      console.error('Error unbundling server-side model');
    }
  } else {
    console.warn('No model bundle received from the server');
  }

  // Specify the time it takes before unsubscribe actually fires
  var unloadDelay = typeof window !== 'undefined' && window.__racerUnloadDelay || DEFAULT_UNLOAD_DELAY;
  model.root.unloadDelay = unloadDelay;
  return model;
}
module.exports = exports['default'];